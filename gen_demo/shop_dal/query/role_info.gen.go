// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newRoleInfo(db *gorm.DB, opts ...gen.DOOption) roleInfo {
	_roleInfo := roleInfo{}

	_roleInfo.roleInfoDo.UseDB(db, opts...)
	_roleInfo.roleInfoDo.UseModel(&model.RoleInfo{})

	tableName := _roleInfo.roleInfoDo.TableName()
	_roleInfo.ALL = field.NewAsterisk(tableName)
	_roleInfo.ID = field.NewInt32(tableName, "id")
	_roleInfo.Name = field.NewString(tableName, "name")
	_roleInfo.Desc = field.NewString(tableName, "desc")
	_roleInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_roleInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_roleInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_roleInfo.fillFieldMap()

	return _roleInfo
}

type roleInfo struct {
	roleInfoDo roleInfoDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String // 角色名称
	Desc      field.String // 描述
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (r roleInfo) Table(newTableName string) *roleInfo {
	r.roleInfoDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleInfo) As(alias string) *roleInfo {
	r.roleInfoDo.DO = *(r.roleInfoDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleInfo) updateTableName(table string) *roleInfo {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.Name = field.NewString(table, "name")
	r.Desc = field.NewString(table, "desc")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")

	r.fillFieldMap()

	return r
}

func (r *roleInfo) WithContext(ctx context.Context) IRoleInfoDo { return r.roleInfoDo.WithContext(ctx) }

func (r roleInfo) TableName() string { return r.roleInfoDo.TableName() }

func (r roleInfo) Alias() string { return r.roleInfoDo.Alias() }

func (r roleInfo) Columns(cols ...field.Expr) gen.Columns { return r.roleInfoDo.Columns(cols...) }

func (r *roleInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleInfo) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id"] = r.ID
	r.fieldMap["name"] = r.Name
	r.fieldMap["desc"] = r.Desc
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
}

func (r roleInfo) clone(db *gorm.DB) roleInfo {
	r.roleInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roleInfo) replaceDB(db *gorm.DB) roleInfo {
	r.roleInfoDo.ReplaceDB(db)
	return r
}

type roleInfoDo struct{ gen.DO }

type IRoleInfoDo interface {
	gen.SubQuery
	Debug() IRoleInfoDo
	WithContext(ctx context.Context) IRoleInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoleInfoDo
	WriteDB() IRoleInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoleInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoleInfoDo
	Not(conds ...gen.Condition) IRoleInfoDo
	Or(conds ...gen.Condition) IRoleInfoDo
	Select(conds ...field.Expr) IRoleInfoDo
	Where(conds ...gen.Condition) IRoleInfoDo
	Order(conds ...field.Expr) IRoleInfoDo
	Distinct(cols ...field.Expr) IRoleInfoDo
	Omit(cols ...field.Expr) IRoleInfoDo
	Join(table schema.Tabler, on ...field.Expr) IRoleInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoleInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoleInfoDo
	Group(cols ...field.Expr) IRoleInfoDo
	Having(conds ...gen.Condition) IRoleInfoDo
	Limit(limit int) IRoleInfoDo
	Offset(offset int) IRoleInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleInfoDo
	Unscoped() IRoleInfoDo
	Create(values ...*model.RoleInfo) error
	CreateInBatches(values []*model.RoleInfo, batchSize int) error
	Save(values ...*model.RoleInfo) error
	First() (*model.RoleInfo, error)
	Take() (*model.RoleInfo, error)
	Last() (*model.RoleInfo, error)
	Find() ([]*model.RoleInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleInfo, err error)
	FindInBatches(result *[]*model.RoleInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RoleInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoleInfoDo
	Assign(attrs ...field.AssignExpr) IRoleInfoDo
	Joins(fields ...field.RelationField) IRoleInfoDo
	Preload(fields ...field.RelationField) IRoleInfoDo
	FirstOrInit() (*model.RoleInfo, error)
	FirstOrCreate() (*model.RoleInfo, error)
	FindByPage(offset int, limit int) (result []*model.RoleInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoleInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roleInfoDo) Debug() IRoleInfoDo {
	return r.withDO(r.DO.Debug())
}

func (r roleInfoDo) WithContext(ctx context.Context) IRoleInfoDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleInfoDo) ReadDB() IRoleInfoDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleInfoDo) WriteDB() IRoleInfoDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleInfoDo) Session(config *gorm.Session) IRoleInfoDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleInfoDo) Clauses(conds ...clause.Expression) IRoleInfoDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleInfoDo) Returning(value interface{}, columns ...string) IRoleInfoDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleInfoDo) Not(conds ...gen.Condition) IRoleInfoDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleInfoDo) Or(conds ...gen.Condition) IRoleInfoDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleInfoDo) Select(conds ...field.Expr) IRoleInfoDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleInfoDo) Where(conds ...gen.Condition) IRoleInfoDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleInfoDo) Order(conds ...field.Expr) IRoleInfoDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleInfoDo) Distinct(cols ...field.Expr) IRoleInfoDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleInfoDo) Omit(cols ...field.Expr) IRoleInfoDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleInfoDo) Join(table schema.Tabler, on ...field.Expr) IRoleInfoDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoleInfoDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoleInfoDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleInfoDo) Group(cols ...field.Expr) IRoleInfoDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleInfoDo) Having(conds ...gen.Condition) IRoleInfoDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleInfoDo) Limit(limit int) IRoleInfoDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleInfoDo) Offset(offset int) IRoleInfoDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleInfoDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleInfoDo) Unscoped() IRoleInfoDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleInfoDo) Create(values ...*model.RoleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleInfoDo) CreateInBatches(values []*model.RoleInfo, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleInfoDo) Save(values ...*model.RoleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleInfoDo) First() (*model.RoleInfo, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleInfo), nil
	}
}

func (r roleInfoDo) Take() (*model.RoleInfo, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleInfo), nil
	}
}

func (r roleInfoDo) Last() (*model.RoleInfo, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleInfo), nil
	}
}

func (r roleInfoDo) Find() ([]*model.RoleInfo, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoleInfo), err
}

func (r roleInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleInfo, err error) {
	buf := make([]*model.RoleInfo, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleInfoDo) FindInBatches(result *[]*model.RoleInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleInfoDo) Attrs(attrs ...field.AssignExpr) IRoleInfoDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleInfoDo) Assign(attrs ...field.AssignExpr) IRoleInfoDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleInfoDo) Joins(fields ...field.RelationField) IRoleInfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleInfoDo) Preload(fields ...field.RelationField) IRoleInfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleInfoDo) FirstOrInit() (*model.RoleInfo, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleInfo), nil
	}
}

func (r roleInfoDo) FirstOrCreate() (*model.RoleInfo, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleInfo), nil
	}
}

func (r roleInfoDo) FindByPage(offset int, limit int) (result []*model.RoleInfo, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleInfoDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleInfoDo) Delete(models ...*model.RoleInfo) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleInfoDo) withDO(do gen.Dao) *roleInfoDo {
	r.DO = *do.(*gen.DO)
	return r
}
