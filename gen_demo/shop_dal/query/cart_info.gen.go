// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newCartInfo(db *gorm.DB, opts ...gen.DOOption) cartInfo {
	_cartInfo := cartInfo{}

	_cartInfo.cartInfoDo.UseDB(db, opts...)
	_cartInfo.cartInfoDo.UseModel(&model.CartInfo{})

	tableName := _cartInfo.cartInfoDo.TableName()
	_cartInfo.ALL = field.NewAsterisk(tableName)
	_cartInfo.ID = field.NewInt32(tableName, "id")
	_cartInfo.UserID = field.NewInt32(tableName, "user_id")
	_cartInfo.GoodsOptionsID = field.NewInt32(tableName, "goods_options_id")
	_cartInfo.Count = field.NewInt32(tableName, "count")
	_cartInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_cartInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cartInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_cartInfo.fillFieldMap()

	return _cartInfo
}

type cartInfo struct {
	cartInfoDo cartInfoDo

	ALL            field.Asterisk
	ID             field.Int32 // 购物车表
	UserID         field.Int32
	GoodsOptionsID field.Int32 // 商品规格id
	Count          field.Int32 // 商品数量
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field

	fieldMap map[string]field.Expr
}

func (c cartInfo) Table(newTableName string) *cartInfo {
	c.cartInfoDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cartInfo) As(alias string) *cartInfo {
	c.cartInfoDo.DO = *(c.cartInfoDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cartInfo) updateTableName(table string) *cartInfo {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.UserID = field.NewInt32(table, "user_id")
	c.GoodsOptionsID = field.NewInt32(table, "goods_options_id")
	c.Count = field.NewInt32(table, "count")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *cartInfo) WithContext(ctx context.Context) ICartInfoDo { return c.cartInfoDo.WithContext(ctx) }

func (c cartInfo) TableName() string { return c.cartInfoDo.TableName() }

func (c cartInfo) Alias() string { return c.cartInfoDo.Alias() }

func (c cartInfo) Columns(cols ...field.Expr) gen.Columns { return c.cartInfoDo.Columns(cols...) }

func (c *cartInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cartInfo) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["goods_options_id"] = c.GoodsOptionsID
	c.fieldMap["count"] = c.Count
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c cartInfo) clone(db *gorm.DB) cartInfo {
	c.cartInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cartInfo) replaceDB(db *gorm.DB) cartInfo {
	c.cartInfoDo.ReplaceDB(db)
	return c
}

type cartInfoDo struct{ gen.DO }

type ICartInfoDo interface {
	gen.SubQuery
	Debug() ICartInfoDo
	WithContext(ctx context.Context) ICartInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICartInfoDo
	WriteDB() ICartInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICartInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICartInfoDo
	Not(conds ...gen.Condition) ICartInfoDo
	Or(conds ...gen.Condition) ICartInfoDo
	Select(conds ...field.Expr) ICartInfoDo
	Where(conds ...gen.Condition) ICartInfoDo
	Order(conds ...field.Expr) ICartInfoDo
	Distinct(cols ...field.Expr) ICartInfoDo
	Omit(cols ...field.Expr) ICartInfoDo
	Join(table schema.Tabler, on ...field.Expr) ICartInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICartInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICartInfoDo
	Group(cols ...field.Expr) ICartInfoDo
	Having(conds ...gen.Condition) ICartInfoDo
	Limit(limit int) ICartInfoDo
	Offset(offset int) ICartInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICartInfoDo
	Unscoped() ICartInfoDo
	Create(values ...*model.CartInfo) error
	CreateInBatches(values []*model.CartInfo, batchSize int) error
	Save(values ...*model.CartInfo) error
	First() (*model.CartInfo, error)
	Take() (*model.CartInfo, error)
	Last() (*model.CartInfo, error)
	Find() ([]*model.CartInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CartInfo, err error)
	FindInBatches(result *[]*model.CartInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CartInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICartInfoDo
	Assign(attrs ...field.AssignExpr) ICartInfoDo
	Joins(fields ...field.RelationField) ICartInfoDo
	Preload(fields ...field.RelationField) ICartInfoDo
	FirstOrInit() (*model.CartInfo, error)
	FirstOrCreate() (*model.CartInfo, error)
	FindByPage(offset int, limit int) (result []*model.CartInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICartInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cartInfoDo) Debug() ICartInfoDo {
	return c.withDO(c.DO.Debug())
}

func (c cartInfoDo) WithContext(ctx context.Context) ICartInfoDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cartInfoDo) ReadDB() ICartInfoDo {
	return c.Clauses(dbresolver.Read)
}

func (c cartInfoDo) WriteDB() ICartInfoDo {
	return c.Clauses(dbresolver.Write)
}

func (c cartInfoDo) Session(config *gorm.Session) ICartInfoDo {
	return c.withDO(c.DO.Session(config))
}

func (c cartInfoDo) Clauses(conds ...clause.Expression) ICartInfoDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cartInfoDo) Returning(value interface{}, columns ...string) ICartInfoDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cartInfoDo) Not(conds ...gen.Condition) ICartInfoDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cartInfoDo) Or(conds ...gen.Condition) ICartInfoDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cartInfoDo) Select(conds ...field.Expr) ICartInfoDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cartInfoDo) Where(conds ...gen.Condition) ICartInfoDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cartInfoDo) Order(conds ...field.Expr) ICartInfoDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cartInfoDo) Distinct(cols ...field.Expr) ICartInfoDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cartInfoDo) Omit(cols ...field.Expr) ICartInfoDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cartInfoDo) Join(table schema.Tabler, on ...field.Expr) ICartInfoDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cartInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICartInfoDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cartInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ICartInfoDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cartInfoDo) Group(cols ...field.Expr) ICartInfoDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cartInfoDo) Having(conds ...gen.Condition) ICartInfoDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cartInfoDo) Limit(limit int) ICartInfoDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cartInfoDo) Offset(offset int) ICartInfoDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cartInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICartInfoDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cartInfoDo) Unscoped() ICartInfoDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cartInfoDo) Create(values ...*model.CartInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cartInfoDo) CreateInBatches(values []*model.CartInfo, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cartInfoDo) Save(values ...*model.CartInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cartInfoDo) First() (*model.CartInfo, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartInfo), nil
	}
}

func (c cartInfoDo) Take() (*model.CartInfo, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartInfo), nil
	}
}

func (c cartInfoDo) Last() (*model.CartInfo, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartInfo), nil
	}
}

func (c cartInfoDo) Find() ([]*model.CartInfo, error) {
	result, err := c.DO.Find()
	return result.([]*model.CartInfo), err
}

func (c cartInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CartInfo, err error) {
	buf := make([]*model.CartInfo, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cartInfoDo) FindInBatches(result *[]*model.CartInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cartInfoDo) Attrs(attrs ...field.AssignExpr) ICartInfoDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cartInfoDo) Assign(attrs ...field.AssignExpr) ICartInfoDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cartInfoDo) Joins(fields ...field.RelationField) ICartInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cartInfoDo) Preload(fields ...field.RelationField) ICartInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cartInfoDo) FirstOrInit() (*model.CartInfo, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartInfo), nil
	}
}

func (c cartInfoDo) FirstOrCreate() (*model.CartInfo, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartInfo), nil
	}
}

func (c cartInfoDo) FindByPage(offset int, limit int) (result []*model.CartInfo, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cartInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cartInfoDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cartInfoDo) Delete(models ...*model.CartInfo) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cartInfoDo) withDO(do gen.Dao) *cartInfoDo {
	c.DO = *do.(*gen.DO)
	return c
}
