// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newOrderInfo(db *gorm.DB, opts ...gen.DOOption) orderInfo {
	_orderInfo := orderInfo{}

	_orderInfo.orderInfoDo.UseDB(db, opts...)
	_orderInfo.orderInfoDo.UseModel(&model.OrderInfo{})

	tableName := _orderInfo.orderInfoDo.TableName()
	_orderInfo.ALL = field.NewAsterisk(tableName)
	_orderInfo.ID = field.NewInt32(tableName, "id")
	_orderInfo.Number = field.NewString(tableName, "number")
	_orderInfo.UserID = field.NewInt32(tableName, "user_id")
	_orderInfo.PayType = field.NewBool(tableName, "pay_type")
	_orderInfo.Remark = field.NewString(tableName, "remark")
	_orderInfo.PayAt = field.NewTime(tableName, "pay_at")
	_orderInfo.Status = field.NewBool(tableName, "status")
	_orderInfo.ConsigneeName = field.NewString(tableName, "consignee_name")
	_orderInfo.ConsigneePhone = field.NewString(tableName, "consignee_phone")
	_orderInfo.ConsigneeAddress = field.NewString(tableName, "consignee_address")
	_orderInfo.Price = field.NewInt32(tableName, "price")
	_orderInfo.CouponPrice = field.NewInt32(tableName, "coupon_price")
	_orderInfo.ActualPrice = field.NewInt32(tableName, "actual_price")
	_orderInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_orderInfo.UpdatedAt = field.NewTime(tableName, "updated_at")

	_orderInfo.fillFieldMap()

	return _orderInfo
}

// orderInfo 文章（种草）表
type orderInfo struct {
	orderInfoDo orderInfoDo

	ALL              field.Asterisk
	ID               field.Int32
	Number           field.String // 订单编号
	UserID           field.Int32  // 用户id
	PayType          field.Bool   // 支付方式 1微信 2支付宝 3云闪付
	Remark           field.String // 备注
	PayAt            field.Time   // 支付时间
	Status           field.Bool   // 订单状态： 1待支付 2已支付待发货 3已发货 4已收货待评价 5已评价
	ConsigneeName    field.String // 收货人姓名
	ConsigneePhone   field.String // 收货人手机号
	ConsigneeAddress field.String // 收货人详细地址
	Price            field.Int32  // 订单金额 单位分
	CouponPrice      field.Int32  // 优惠券金额 单位分
	ActualPrice      field.Int32  // 实际支付金额 单位分
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (o orderInfo) Table(newTableName string) *orderInfo {
	o.orderInfoDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderInfo) As(alias string) *orderInfo {
	o.orderInfoDo.DO = *(o.orderInfoDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderInfo) updateTableName(table string) *orderInfo {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt32(table, "id")
	o.Number = field.NewString(table, "number")
	o.UserID = field.NewInt32(table, "user_id")
	o.PayType = field.NewBool(table, "pay_type")
	o.Remark = field.NewString(table, "remark")
	o.PayAt = field.NewTime(table, "pay_at")
	o.Status = field.NewBool(table, "status")
	o.ConsigneeName = field.NewString(table, "consignee_name")
	o.ConsigneePhone = field.NewString(table, "consignee_phone")
	o.ConsigneeAddress = field.NewString(table, "consignee_address")
	o.Price = field.NewInt32(table, "price")
	o.CouponPrice = field.NewInt32(table, "coupon_price")
	o.ActualPrice = field.NewInt32(table, "actual_price")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *orderInfo) WithContext(ctx context.Context) IOrderInfoDo {
	return o.orderInfoDo.WithContext(ctx)
}

func (o orderInfo) TableName() string { return o.orderInfoDo.TableName() }

func (o orderInfo) Alias() string { return o.orderInfoDo.Alias() }

func (o orderInfo) Columns(cols ...field.Expr) gen.Columns { return o.orderInfoDo.Columns(cols...) }

func (o *orderInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderInfo) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 15)
	o.fieldMap["id"] = o.ID
	o.fieldMap["number"] = o.Number
	o.fieldMap["user_id"] = o.UserID
	o.fieldMap["pay_type"] = o.PayType
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["pay_at"] = o.PayAt
	o.fieldMap["status"] = o.Status
	o.fieldMap["consignee_name"] = o.ConsigneeName
	o.fieldMap["consignee_phone"] = o.ConsigneePhone
	o.fieldMap["consignee_address"] = o.ConsigneeAddress
	o.fieldMap["price"] = o.Price
	o.fieldMap["coupon_price"] = o.CouponPrice
	o.fieldMap["actual_price"] = o.ActualPrice
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o orderInfo) clone(db *gorm.DB) orderInfo {
	o.orderInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderInfo) replaceDB(db *gorm.DB) orderInfo {
	o.orderInfoDo.ReplaceDB(db)
	return o
}

type orderInfoDo struct{ gen.DO }

type IOrderInfoDo interface {
	gen.SubQuery
	Debug() IOrderInfoDo
	WithContext(ctx context.Context) IOrderInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderInfoDo
	WriteDB() IOrderInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderInfoDo
	Not(conds ...gen.Condition) IOrderInfoDo
	Or(conds ...gen.Condition) IOrderInfoDo
	Select(conds ...field.Expr) IOrderInfoDo
	Where(conds ...gen.Condition) IOrderInfoDo
	Order(conds ...field.Expr) IOrderInfoDo
	Distinct(cols ...field.Expr) IOrderInfoDo
	Omit(cols ...field.Expr) IOrderInfoDo
	Join(table schema.Tabler, on ...field.Expr) IOrderInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderInfoDo
	Group(cols ...field.Expr) IOrderInfoDo
	Having(conds ...gen.Condition) IOrderInfoDo
	Limit(limit int) IOrderInfoDo
	Offset(offset int) IOrderInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderInfoDo
	Unscoped() IOrderInfoDo
	Create(values ...*model.OrderInfo) error
	CreateInBatches(values []*model.OrderInfo, batchSize int) error
	Save(values ...*model.OrderInfo) error
	First() (*model.OrderInfo, error)
	Take() (*model.OrderInfo, error)
	Last() (*model.OrderInfo, error)
	Find() ([]*model.OrderInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderInfo, err error)
	FindInBatches(result *[]*model.OrderInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderInfoDo
	Assign(attrs ...field.AssignExpr) IOrderInfoDo
	Joins(fields ...field.RelationField) IOrderInfoDo
	Preload(fields ...field.RelationField) IOrderInfoDo
	FirstOrInit() (*model.OrderInfo, error)
	FirstOrCreate() (*model.OrderInfo, error)
	FindByPage(offset int, limit int) (result []*model.OrderInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderInfoDo) Debug() IOrderInfoDo {
	return o.withDO(o.DO.Debug())
}

func (o orderInfoDo) WithContext(ctx context.Context) IOrderInfoDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderInfoDo) ReadDB() IOrderInfoDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderInfoDo) WriteDB() IOrderInfoDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderInfoDo) Session(config *gorm.Session) IOrderInfoDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderInfoDo) Clauses(conds ...clause.Expression) IOrderInfoDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderInfoDo) Returning(value interface{}, columns ...string) IOrderInfoDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderInfoDo) Not(conds ...gen.Condition) IOrderInfoDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderInfoDo) Or(conds ...gen.Condition) IOrderInfoDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderInfoDo) Select(conds ...field.Expr) IOrderInfoDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderInfoDo) Where(conds ...gen.Condition) IOrderInfoDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderInfoDo) Order(conds ...field.Expr) IOrderInfoDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderInfoDo) Distinct(cols ...field.Expr) IOrderInfoDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderInfoDo) Omit(cols ...field.Expr) IOrderInfoDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderInfoDo) Join(table schema.Tabler, on ...field.Expr) IOrderInfoDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderInfoDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderInfoDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderInfoDo) Group(cols ...field.Expr) IOrderInfoDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderInfoDo) Having(conds ...gen.Condition) IOrderInfoDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderInfoDo) Limit(limit int) IOrderInfoDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderInfoDo) Offset(offset int) IOrderInfoDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderInfoDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderInfoDo) Unscoped() IOrderInfoDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderInfoDo) Create(values ...*model.OrderInfo) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderInfoDo) CreateInBatches(values []*model.OrderInfo, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderInfoDo) Save(values ...*model.OrderInfo) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderInfoDo) First() (*model.OrderInfo, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderInfo), nil
	}
}

func (o orderInfoDo) Take() (*model.OrderInfo, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderInfo), nil
	}
}

func (o orderInfoDo) Last() (*model.OrderInfo, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderInfo), nil
	}
}

func (o orderInfoDo) Find() ([]*model.OrderInfo, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderInfo), err
}

func (o orderInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderInfo, err error) {
	buf := make([]*model.OrderInfo, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderInfoDo) FindInBatches(result *[]*model.OrderInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderInfoDo) Attrs(attrs ...field.AssignExpr) IOrderInfoDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderInfoDo) Assign(attrs ...field.AssignExpr) IOrderInfoDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderInfoDo) Joins(fields ...field.RelationField) IOrderInfoDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderInfoDo) Preload(fields ...field.RelationField) IOrderInfoDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderInfoDo) FirstOrInit() (*model.OrderInfo, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderInfo), nil
	}
}

func (o orderInfoDo) FirstOrCreate() (*model.OrderInfo, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderInfo), nil
	}
}

func (o orderInfoDo) FindByPage(offset int, limit int) (result []*model.OrderInfo, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderInfoDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderInfoDo) Delete(models ...*model.OrderInfo) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderInfoDo) withDO(do gen.Dao) *orderInfoDo {
	o.DO = *do.(*gen.DO)
	return o
}
