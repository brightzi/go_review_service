// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newAddressInfo(db *gorm.DB, opts ...gen.DOOption) addressInfo {
	_addressInfo := addressInfo{}

	_addressInfo.addressInfoDo.UseDB(db, opts...)
	_addressInfo.addressInfoDo.UseModel(&model.AddressInfo{})

	tableName := _addressInfo.addressInfoDo.TableName()
	_addressInfo.ALL = field.NewAsterisk(tableName)
	_addressInfo.ID = field.NewInt32(tableName, "id")
	_addressInfo.Name = field.NewString(tableName, "name")
	_addressInfo.Pid = field.NewInt32(tableName, "pid")
	_addressInfo.Status = field.NewInt32(tableName, "status")
	_addressInfo.UpdatedAt = field.NewTime(tableName, "updated_at")

	_addressInfo.fillFieldMap()

	return _addressInfo
}

// addressInfo 全国城市信息表
type addressInfo struct {
	addressInfoDo addressInfoDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String
	Pid       field.Int32
	Status    field.Int32
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a addressInfo) Table(newTableName string) *addressInfo {
	a.addressInfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a addressInfo) As(alias string) *addressInfo {
	a.addressInfoDo.DO = *(a.addressInfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *addressInfo) updateTableName(table string) *addressInfo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")
	a.Pid = field.NewInt32(table, "pid")
	a.Status = field.NewInt32(table, "status")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *addressInfo) WithContext(ctx context.Context) IAddressInfoDo {
	return a.addressInfoDo.WithContext(ctx)
}

func (a addressInfo) TableName() string { return a.addressInfoDo.TableName() }

func (a addressInfo) Alias() string { return a.addressInfoDo.Alias() }

func (a addressInfo) Columns(cols ...field.Expr) gen.Columns { return a.addressInfoDo.Columns(cols...) }

func (a *addressInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *addressInfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["pid"] = a.Pid
	a.fieldMap["status"] = a.Status
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a addressInfo) clone(db *gorm.DB) addressInfo {
	a.addressInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a addressInfo) replaceDB(db *gorm.DB) addressInfo {
	a.addressInfoDo.ReplaceDB(db)
	return a
}

type addressInfoDo struct{ gen.DO }

type IAddressInfoDo interface {
	gen.SubQuery
	Debug() IAddressInfoDo
	WithContext(ctx context.Context) IAddressInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAddressInfoDo
	WriteDB() IAddressInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAddressInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAddressInfoDo
	Not(conds ...gen.Condition) IAddressInfoDo
	Or(conds ...gen.Condition) IAddressInfoDo
	Select(conds ...field.Expr) IAddressInfoDo
	Where(conds ...gen.Condition) IAddressInfoDo
	Order(conds ...field.Expr) IAddressInfoDo
	Distinct(cols ...field.Expr) IAddressInfoDo
	Omit(cols ...field.Expr) IAddressInfoDo
	Join(table schema.Tabler, on ...field.Expr) IAddressInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAddressInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAddressInfoDo
	Group(cols ...field.Expr) IAddressInfoDo
	Having(conds ...gen.Condition) IAddressInfoDo
	Limit(limit int) IAddressInfoDo
	Offset(offset int) IAddressInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAddressInfoDo
	Unscoped() IAddressInfoDo
	Create(values ...*model.AddressInfo) error
	CreateInBatches(values []*model.AddressInfo, batchSize int) error
	Save(values ...*model.AddressInfo) error
	First() (*model.AddressInfo, error)
	Take() (*model.AddressInfo, error)
	Last() (*model.AddressInfo, error)
	Find() ([]*model.AddressInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AddressInfo, err error)
	FindInBatches(result *[]*model.AddressInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AddressInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAddressInfoDo
	Assign(attrs ...field.AssignExpr) IAddressInfoDo
	Joins(fields ...field.RelationField) IAddressInfoDo
	Preload(fields ...field.RelationField) IAddressInfoDo
	FirstOrInit() (*model.AddressInfo, error)
	FirstOrCreate() (*model.AddressInfo, error)
	FindByPage(offset int, limit int) (result []*model.AddressInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAddressInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a addressInfoDo) Debug() IAddressInfoDo {
	return a.withDO(a.DO.Debug())
}

func (a addressInfoDo) WithContext(ctx context.Context) IAddressInfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a addressInfoDo) ReadDB() IAddressInfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a addressInfoDo) WriteDB() IAddressInfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a addressInfoDo) Session(config *gorm.Session) IAddressInfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a addressInfoDo) Clauses(conds ...clause.Expression) IAddressInfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a addressInfoDo) Returning(value interface{}, columns ...string) IAddressInfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a addressInfoDo) Not(conds ...gen.Condition) IAddressInfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a addressInfoDo) Or(conds ...gen.Condition) IAddressInfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a addressInfoDo) Select(conds ...field.Expr) IAddressInfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a addressInfoDo) Where(conds ...gen.Condition) IAddressInfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a addressInfoDo) Order(conds ...field.Expr) IAddressInfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a addressInfoDo) Distinct(cols ...field.Expr) IAddressInfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a addressInfoDo) Omit(cols ...field.Expr) IAddressInfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a addressInfoDo) Join(table schema.Tabler, on ...field.Expr) IAddressInfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a addressInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAddressInfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a addressInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IAddressInfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a addressInfoDo) Group(cols ...field.Expr) IAddressInfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a addressInfoDo) Having(conds ...gen.Condition) IAddressInfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a addressInfoDo) Limit(limit int) IAddressInfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a addressInfoDo) Offset(offset int) IAddressInfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a addressInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAddressInfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a addressInfoDo) Unscoped() IAddressInfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a addressInfoDo) Create(values ...*model.AddressInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a addressInfoDo) CreateInBatches(values []*model.AddressInfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a addressInfoDo) Save(values ...*model.AddressInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a addressInfoDo) First() (*model.AddressInfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressInfo), nil
	}
}

func (a addressInfoDo) Take() (*model.AddressInfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressInfo), nil
	}
}

func (a addressInfoDo) Last() (*model.AddressInfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressInfo), nil
	}
}

func (a addressInfoDo) Find() ([]*model.AddressInfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.AddressInfo), err
}

func (a addressInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AddressInfo, err error) {
	buf := make([]*model.AddressInfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a addressInfoDo) FindInBatches(result *[]*model.AddressInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a addressInfoDo) Attrs(attrs ...field.AssignExpr) IAddressInfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a addressInfoDo) Assign(attrs ...field.AssignExpr) IAddressInfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a addressInfoDo) Joins(fields ...field.RelationField) IAddressInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a addressInfoDo) Preload(fields ...field.RelationField) IAddressInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a addressInfoDo) FirstOrInit() (*model.AddressInfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressInfo), nil
	}
}

func (a addressInfoDo) FirstOrCreate() (*model.AddressInfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressInfo), nil
	}
}

func (a addressInfoDo) FindByPage(offset int, limit int) (result []*model.AddressInfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a addressInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a addressInfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a addressInfoDo) Delete(models ...*model.AddressInfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *addressInfoDo) withDO(do gen.Dao) *addressInfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
