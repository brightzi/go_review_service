// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newConsigneeInfo(db *gorm.DB, opts ...gen.DOOption) consigneeInfo {
	_consigneeInfo := consigneeInfo{}

	_consigneeInfo.consigneeInfoDo.UseDB(db, opts...)
	_consigneeInfo.consigneeInfoDo.UseModel(&model.ConsigneeInfo{})

	tableName := _consigneeInfo.consigneeInfoDo.TableName()
	_consigneeInfo.ALL = field.NewAsterisk(tableName)
	_consigneeInfo.ID = field.NewInt32(tableName, "id")
	_consigneeInfo.UserID = field.NewInt32(tableName, "user_id")
	_consigneeInfo.IsDefault = field.NewBool(tableName, "is_default")
	_consigneeInfo.Name = field.NewString(tableName, "name")
	_consigneeInfo.Phone = field.NewString(tableName, "phone")
	_consigneeInfo.Province = field.NewString(tableName, "province")
	_consigneeInfo.City = field.NewString(tableName, "city")
	_consigneeInfo.Town = field.NewString(tableName, "town")
	_consigneeInfo.Street = field.NewString(tableName, "street")
	_consigneeInfo.Detail = field.NewString(tableName, "detail")
	_consigneeInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_consigneeInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_consigneeInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_consigneeInfo.fillFieldMap()

	return _consigneeInfo
}

type consigneeInfo struct {
	consigneeInfoDo consigneeInfoDo

	ALL    field.Asterisk
	ID     field.Int32 // 收货地址表
	UserID field.Int32
	/*
		默认地址1  非默认0

	*/
	IsDefault field.Bool
	Name      field.String
	Phone     field.String
	Province  field.String
	City      field.String
	Town      field.String // 县区
	Street    field.String // 街道乡镇
	Detail    field.String // 地址详情
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (c consigneeInfo) Table(newTableName string) *consigneeInfo {
	c.consigneeInfoDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c consigneeInfo) As(alias string) *consigneeInfo {
	c.consigneeInfoDo.DO = *(c.consigneeInfoDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *consigneeInfo) updateTableName(table string) *consigneeInfo {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.UserID = field.NewInt32(table, "user_id")
	c.IsDefault = field.NewBool(table, "is_default")
	c.Name = field.NewString(table, "name")
	c.Phone = field.NewString(table, "phone")
	c.Province = field.NewString(table, "province")
	c.City = field.NewString(table, "city")
	c.Town = field.NewString(table, "town")
	c.Street = field.NewString(table, "street")
	c.Detail = field.NewString(table, "detail")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *consigneeInfo) WithContext(ctx context.Context) IConsigneeInfoDo {
	return c.consigneeInfoDo.WithContext(ctx)
}

func (c consigneeInfo) TableName() string { return c.consigneeInfoDo.TableName() }

func (c consigneeInfo) Alias() string { return c.consigneeInfoDo.Alias() }

func (c consigneeInfo) Columns(cols ...field.Expr) gen.Columns {
	return c.consigneeInfoDo.Columns(cols...)
}

func (c *consigneeInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *consigneeInfo) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 13)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["is_default"] = c.IsDefault
	c.fieldMap["name"] = c.Name
	c.fieldMap["phone"] = c.Phone
	c.fieldMap["province"] = c.Province
	c.fieldMap["city"] = c.City
	c.fieldMap["town"] = c.Town
	c.fieldMap["street"] = c.Street
	c.fieldMap["detail"] = c.Detail
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c consigneeInfo) clone(db *gorm.DB) consigneeInfo {
	c.consigneeInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c consigneeInfo) replaceDB(db *gorm.DB) consigneeInfo {
	c.consigneeInfoDo.ReplaceDB(db)
	return c
}

type consigneeInfoDo struct{ gen.DO }

type IConsigneeInfoDo interface {
	gen.SubQuery
	Debug() IConsigneeInfoDo
	WithContext(ctx context.Context) IConsigneeInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConsigneeInfoDo
	WriteDB() IConsigneeInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConsigneeInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConsigneeInfoDo
	Not(conds ...gen.Condition) IConsigneeInfoDo
	Or(conds ...gen.Condition) IConsigneeInfoDo
	Select(conds ...field.Expr) IConsigneeInfoDo
	Where(conds ...gen.Condition) IConsigneeInfoDo
	Order(conds ...field.Expr) IConsigneeInfoDo
	Distinct(cols ...field.Expr) IConsigneeInfoDo
	Omit(cols ...field.Expr) IConsigneeInfoDo
	Join(table schema.Tabler, on ...field.Expr) IConsigneeInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConsigneeInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConsigneeInfoDo
	Group(cols ...field.Expr) IConsigneeInfoDo
	Having(conds ...gen.Condition) IConsigneeInfoDo
	Limit(limit int) IConsigneeInfoDo
	Offset(offset int) IConsigneeInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConsigneeInfoDo
	Unscoped() IConsigneeInfoDo
	Create(values ...*model.ConsigneeInfo) error
	CreateInBatches(values []*model.ConsigneeInfo, batchSize int) error
	Save(values ...*model.ConsigneeInfo) error
	First() (*model.ConsigneeInfo, error)
	Take() (*model.ConsigneeInfo, error)
	Last() (*model.ConsigneeInfo, error)
	Find() ([]*model.ConsigneeInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConsigneeInfo, err error)
	FindInBatches(result *[]*model.ConsigneeInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ConsigneeInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConsigneeInfoDo
	Assign(attrs ...field.AssignExpr) IConsigneeInfoDo
	Joins(fields ...field.RelationField) IConsigneeInfoDo
	Preload(fields ...field.RelationField) IConsigneeInfoDo
	FirstOrInit() (*model.ConsigneeInfo, error)
	FirstOrCreate() (*model.ConsigneeInfo, error)
	FindByPage(offset int, limit int) (result []*model.ConsigneeInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConsigneeInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c consigneeInfoDo) Debug() IConsigneeInfoDo {
	return c.withDO(c.DO.Debug())
}

func (c consigneeInfoDo) WithContext(ctx context.Context) IConsigneeInfoDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c consigneeInfoDo) ReadDB() IConsigneeInfoDo {
	return c.Clauses(dbresolver.Read)
}

func (c consigneeInfoDo) WriteDB() IConsigneeInfoDo {
	return c.Clauses(dbresolver.Write)
}

func (c consigneeInfoDo) Session(config *gorm.Session) IConsigneeInfoDo {
	return c.withDO(c.DO.Session(config))
}

func (c consigneeInfoDo) Clauses(conds ...clause.Expression) IConsigneeInfoDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c consigneeInfoDo) Returning(value interface{}, columns ...string) IConsigneeInfoDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c consigneeInfoDo) Not(conds ...gen.Condition) IConsigneeInfoDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c consigneeInfoDo) Or(conds ...gen.Condition) IConsigneeInfoDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c consigneeInfoDo) Select(conds ...field.Expr) IConsigneeInfoDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c consigneeInfoDo) Where(conds ...gen.Condition) IConsigneeInfoDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c consigneeInfoDo) Order(conds ...field.Expr) IConsigneeInfoDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c consigneeInfoDo) Distinct(cols ...field.Expr) IConsigneeInfoDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c consigneeInfoDo) Omit(cols ...field.Expr) IConsigneeInfoDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c consigneeInfoDo) Join(table schema.Tabler, on ...field.Expr) IConsigneeInfoDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c consigneeInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConsigneeInfoDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c consigneeInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IConsigneeInfoDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c consigneeInfoDo) Group(cols ...field.Expr) IConsigneeInfoDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c consigneeInfoDo) Having(conds ...gen.Condition) IConsigneeInfoDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c consigneeInfoDo) Limit(limit int) IConsigneeInfoDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c consigneeInfoDo) Offset(offset int) IConsigneeInfoDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c consigneeInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConsigneeInfoDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c consigneeInfoDo) Unscoped() IConsigneeInfoDo {
	return c.withDO(c.DO.Unscoped())
}

func (c consigneeInfoDo) Create(values ...*model.ConsigneeInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c consigneeInfoDo) CreateInBatches(values []*model.ConsigneeInfo, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c consigneeInfoDo) Save(values ...*model.ConsigneeInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c consigneeInfoDo) First() (*model.ConsigneeInfo, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConsigneeInfo), nil
	}
}

func (c consigneeInfoDo) Take() (*model.ConsigneeInfo, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConsigneeInfo), nil
	}
}

func (c consigneeInfoDo) Last() (*model.ConsigneeInfo, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConsigneeInfo), nil
	}
}

func (c consigneeInfoDo) Find() ([]*model.ConsigneeInfo, error) {
	result, err := c.DO.Find()
	return result.([]*model.ConsigneeInfo), err
}

func (c consigneeInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConsigneeInfo, err error) {
	buf := make([]*model.ConsigneeInfo, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c consigneeInfoDo) FindInBatches(result *[]*model.ConsigneeInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c consigneeInfoDo) Attrs(attrs ...field.AssignExpr) IConsigneeInfoDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c consigneeInfoDo) Assign(attrs ...field.AssignExpr) IConsigneeInfoDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c consigneeInfoDo) Joins(fields ...field.RelationField) IConsigneeInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c consigneeInfoDo) Preload(fields ...field.RelationField) IConsigneeInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c consigneeInfoDo) FirstOrInit() (*model.ConsigneeInfo, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConsigneeInfo), nil
	}
}

func (c consigneeInfoDo) FirstOrCreate() (*model.ConsigneeInfo, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConsigneeInfo), nil
	}
}

func (c consigneeInfoDo) FindByPage(offset int, limit int) (result []*model.ConsigneeInfo, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c consigneeInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c consigneeInfoDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c consigneeInfoDo) Delete(models ...*model.ConsigneeInfo) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *consigneeInfoDo) withDO(do gen.Dao) *consigneeInfoDo {
	c.DO = *do.(*gen.DO)
	return c
}
