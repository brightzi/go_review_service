// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newRolePermissionInfo(db *gorm.DB, opts ...gen.DOOption) rolePermissionInfo {
	_rolePermissionInfo := rolePermissionInfo{}

	_rolePermissionInfo.rolePermissionInfoDo.UseDB(db, opts...)
	_rolePermissionInfo.rolePermissionInfoDo.UseModel(&model.RolePermissionInfo{})

	tableName := _rolePermissionInfo.rolePermissionInfoDo.TableName()
	_rolePermissionInfo.ALL = field.NewAsterisk(tableName)
	_rolePermissionInfo.ID = field.NewInt32(tableName, "id")
	_rolePermissionInfo.RoleID = field.NewInt32(tableName, "role_id")
	_rolePermissionInfo.PermissionID = field.NewInt32(tableName, "permission_id")
	_rolePermissionInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_rolePermissionInfo.UpdatedAt = field.NewTime(tableName, "updated_at")

	_rolePermissionInfo.fillFieldMap()

	return _rolePermissionInfo
}

type rolePermissionInfo struct {
	rolePermissionInfoDo rolePermissionInfoDo

	ALL          field.Asterisk
	ID           field.Int32
	RoleID       field.Int32 // 角色id
	PermissionID field.Int32 // 权限id
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (r rolePermissionInfo) Table(newTableName string) *rolePermissionInfo {
	r.rolePermissionInfoDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rolePermissionInfo) As(alias string) *rolePermissionInfo {
	r.rolePermissionInfoDo.DO = *(r.rolePermissionInfoDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rolePermissionInfo) updateTableName(table string) *rolePermissionInfo {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.RoleID = field.NewInt32(table, "role_id")
	r.PermissionID = field.NewInt32(table, "permission_id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *rolePermissionInfo) WithContext(ctx context.Context) IRolePermissionInfoDo {
	return r.rolePermissionInfoDo.WithContext(ctx)
}

func (r rolePermissionInfo) TableName() string { return r.rolePermissionInfoDo.TableName() }

func (r rolePermissionInfo) Alias() string { return r.rolePermissionInfoDo.Alias() }

func (r rolePermissionInfo) Columns(cols ...field.Expr) gen.Columns {
	return r.rolePermissionInfoDo.Columns(cols...)
}

func (r *rolePermissionInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rolePermissionInfo) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["role_id"] = r.RoleID
	r.fieldMap["permission_id"] = r.PermissionID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r rolePermissionInfo) clone(db *gorm.DB) rolePermissionInfo {
	r.rolePermissionInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rolePermissionInfo) replaceDB(db *gorm.DB) rolePermissionInfo {
	r.rolePermissionInfoDo.ReplaceDB(db)
	return r
}

type rolePermissionInfoDo struct{ gen.DO }

type IRolePermissionInfoDo interface {
	gen.SubQuery
	Debug() IRolePermissionInfoDo
	WithContext(ctx context.Context) IRolePermissionInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRolePermissionInfoDo
	WriteDB() IRolePermissionInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRolePermissionInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRolePermissionInfoDo
	Not(conds ...gen.Condition) IRolePermissionInfoDo
	Or(conds ...gen.Condition) IRolePermissionInfoDo
	Select(conds ...field.Expr) IRolePermissionInfoDo
	Where(conds ...gen.Condition) IRolePermissionInfoDo
	Order(conds ...field.Expr) IRolePermissionInfoDo
	Distinct(cols ...field.Expr) IRolePermissionInfoDo
	Omit(cols ...field.Expr) IRolePermissionInfoDo
	Join(table schema.Tabler, on ...field.Expr) IRolePermissionInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRolePermissionInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRolePermissionInfoDo
	Group(cols ...field.Expr) IRolePermissionInfoDo
	Having(conds ...gen.Condition) IRolePermissionInfoDo
	Limit(limit int) IRolePermissionInfoDo
	Offset(offset int) IRolePermissionInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRolePermissionInfoDo
	Unscoped() IRolePermissionInfoDo
	Create(values ...*model.RolePermissionInfo) error
	CreateInBatches(values []*model.RolePermissionInfo, batchSize int) error
	Save(values ...*model.RolePermissionInfo) error
	First() (*model.RolePermissionInfo, error)
	Take() (*model.RolePermissionInfo, error)
	Last() (*model.RolePermissionInfo, error)
	Find() ([]*model.RolePermissionInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RolePermissionInfo, err error)
	FindInBatches(result *[]*model.RolePermissionInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RolePermissionInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRolePermissionInfoDo
	Assign(attrs ...field.AssignExpr) IRolePermissionInfoDo
	Joins(fields ...field.RelationField) IRolePermissionInfoDo
	Preload(fields ...field.RelationField) IRolePermissionInfoDo
	FirstOrInit() (*model.RolePermissionInfo, error)
	FirstOrCreate() (*model.RolePermissionInfo, error)
	FindByPage(offset int, limit int) (result []*model.RolePermissionInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRolePermissionInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rolePermissionInfoDo) Debug() IRolePermissionInfoDo {
	return r.withDO(r.DO.Debug())
}

func (r rolePermissionInfoDo) WithContext(ctx context.Context) IRolePermissionInfoDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rolePermissionInfoDo) ReadDB() IRolePermissionInfoDo {
	return r.Clauses(dbresolver.Read)
}

func (r rolePermissionInfoDo) WriteDB() IRolePermissionInfoDo {
	return r.Clauses(dbresolver.Write)
}

func (r rolePermissionInfoDo) Session(config *gorm.Session) IRolePermissionInfoDo {
	return r.withDO(r.DO.Session(config))
}

func (r rolePermissionInfoDo) Clauses(conds ...clause.Expression) IRolePermissionInfoDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rolePermissionInfoDo) Returning(value interface{}, columns ...string) IRolePermissionInfoDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rolePermissionInfoDo) Not(conds ...gen.Condition) IRolePermissionInfoDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rolePermissionInfoDo) Or(conds ...gen.Condition) IRolePermissionInfoDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rolePermissionInfoDo) Select(conds ...field.Expr) IRolePermissionInfoDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rolePermissionInfoDo) Where(conds ...gen.Condition) IRolePermissionInfoDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rolePermissionInfoDo) Order(conds ...field.Expr) IRolePermissionInfoDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rolePermissionInfoDo) Distinct(cols ...field.Expr) IRolePermissionInfoDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rolePermissionInfoDo) Omit(cols ...field.Expr) IRolePermissionInfoDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rolePermissionInfoDo) Join(table schema.Tabler, on ...field.Expr) IRolePermissionInfoDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rolePermissionInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRolePermissionInfoDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rolePermissionInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IRolePermissionInfoDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rolePermissionInfoDo) Group(cols ...field.Expr) IRolePermissionInfoDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rolePermissionInfoDo) Having(conds ...gen.Condition) IRolePermissionInfoDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rolePermissionInfoDo) Limit(limit int) IRolePermissionInfoDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rolePermissionInfoDo) Offset(offset int) IRolePermissionInfoDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rolePermissionInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRolePermissionInfoDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rolePermissionInfoDo) Unscoped() IRolePermissionInfoDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rolePermissionInfoDo) Create(values ...*model.RolePermissionInfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rolePermissionInfoDo) CreateInBatches(values []*model.RolePermissionInfo, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rolePermissionInfoDo) Save(values ...*model.RolePermissionInfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rolePermissionInfoDo) First() (*model.RolePermissionInfo, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolePermissionInfo), nil
	}
}

func (r rolePermissionInfoDo) Take() (*model.RolePermissionInfo, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolePermissionInfo), nil
	}
}

func (r rolePermissionInfoDo) Last() (*model.RolePermissionInfo, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolePermissionInfo), nil
	}
}

func (r rolePermissionInfoDo) Find() ([]*model.RolePermissionInfo, error) {
	result, err := r.DO.Find()
	return result.([]*model.RolePermissionInfo), err
}

func (r rolePermissionInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RolePermissionInfo, err error) {
	buf := make([]*model.RolePermissionInfo, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rolePermissionInfoDo) FindInBatches(result *[]*model.RolePermissionInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rolePermissionInfoDo) Attrs(attrs ...field.AssignExpr) IRolePermissionInfoDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rolePermissionInfoDo) Assign(attrs ...field.AssignExpr) IRolePermissionInfoDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rolePermissionInfoDo) Joins(fields ...field.RelationField) IRolePermissionInfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rolePermissionInfoDo) Preload(fields ...field.RelationField) IRolePermissionInfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rolePermissionInfoDo) FirstOrInit() (*model.RolePermissionInfo, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolePermissionInfo), nil
	}
}

func (r rolePermissionInfoDo) FirstOrCreate() (*model.RolePermissionInfo, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolePermissionInfo), nil
	}
}

func (r rolePermissionInfoDo) FindByPage(offset int, limit int) (result []*model.RolePermissionInfo, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rolePermissionInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rolePermissionInfoDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rolePermissionInfoDo) Delete(models ...*model.RolePermissionInfo) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rolePermissionInfoDo) withDO(do gen.Dao) *rolePermissionInfoDo {
	r.DO = *do.(*gen.DO)
	return r
}
