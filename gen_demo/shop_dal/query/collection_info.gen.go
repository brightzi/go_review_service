// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newCollectionInfo(db *gorm.DB, opts ...gen.DOOption) collectionInfo {
	_collectionInfo := collectionInfo{}

	_collectionInfo.collectionInfoDo.UseDB(db, opts...)
	_collectionInfo.collectionInfoDo.UseModel(&model.CollectionInfo{})

	tableName := _collectionInfo.collectionInfoDo.TableName()
	_collectionInfo.ALL = field.NewAsterisk(tableName)
	_collectionInfo.ID = field.NewInt32(tableName, "id")
	_collectionInfo.UserID = field.NewInt32(tableName, "user_id")
	_collectionInfo.ObjectID = field.NewInt32(tableName, "object_id")
	_collectionInfo.Type = field.NewBool(tableName, "type")
	_collectionInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_collectionInfo.UpdatedAt = field.NewTime(tableName, "updated_at")

	_collectionInfo.fillFieldMap()

	return _collectionInfo
}

type collectionInfo struct {
	collectionInfoDo collectionInfoDo

	ALL       field.Asterisk
	ID        field.Int32
	UserID    field.Int32 // 用户id
	ObjectID  field.Int32 // 对象id
	Type      field.Bool  // 收藏类型：1商品 2文章
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c collectionInfo) Table(newTableName string) *collectionInfo {
	c.collectionInfoDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c collectionInfo) As(alias string) *collectionInfo {
	c.collectionInfoDo.DO = *(c.collectionInfoDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *collectionInfo) updateTableName(table string) *collectionInfo {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.UserID = field.NewInt32(table, "user_id")
	c.ObjectID = field.NewInt32(table, "object_id")
	c.Type = field.NewBool(table, "type")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *collectionInfo) WithContext(ctx context.Context) ICollectionInfoDo {
	return c.collectionInfoDo.WithContext(ctx)
}

func (c collectionInfo) TableName() string { return c.collectionInfoDo.TableName() }

func (c collectionInfo) Alias() string { return c.collectionInfoDo.Alias() }

func (c collectionInfo) Columns(cols ...field.Expr) gen.Columns {
	return c.collectionInfoDo.Columns(cols...)
}

func (c *collectionInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *collectionInfo) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["object_id"] = c.ObjectID
	c.fieldMap["type"] = c.Type
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c collectionInfo) clone(db *gorm.DB) collectionInfo {
	c.collectionInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c collectionInfo) replaceDB(db *gorm.DB) collectionInfo {
	c.collectionInfoDo.ReplaceDB(db)
	return c
}

type collectionInfoDo struct{ gen.DO }

type ICollectionInfoDo interface {
	gen.SubQuery
	Debug() ICollectionInfoDo
	WithContext(ctx context.Context) ICollectionInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICollectionInfoDo
	WriteDB() ICollectionInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICollectionInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICollectionInfoDo
	Not(conds ...gen.Condition) ICollectionInfoDo
	Or(conds ...gen.Condition) ICollectionInfoDo
	Select(conds ...field.Expr) ICollectionInfoDo
	Where(conds ...gen.Condition) ICollectionInfoDo
	Order(conds ...field.Expr) ICollectionInfoDo
	Distinct(cols ...field.Expr) ICollectionInfoDo
	Omit(cols ...field.Expr) ICollectionInfoDo
	Join(table schema.Tabler, on ...field.Expr) ICollectionInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICollectionInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICollectionInfoDo
	Group(cols ...field.Expr) ICollectionInfoDo
	Having(conds ...gen.Condition) ICollectionInfoDo
	Limit(limit int) ICollectionInfoDo
	Offset(offset int) ICollectionInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectionInfoDo
	Unscoped() ICollectionInfoDo
	Create(values ...*model.CollectionInfo) error
	CreateInBatches(values []*model.CollectionInfo, batchSize int) error
	Save(values ...*model.CollectionInfo) error
	First() (*model.CollectionInfo, error)
	Take() (*model.CollectionInfo, error)
	Last() (*model.CollectionInfo, error)
	Find() ([]*model.CollectionInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectionInfo, err error)
	FindInBatches(result *[]*model.CollectionInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CollectionInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICollectionInfoDo
	Assign(attrs ...field.AssignExpr) ICollectionInfoDo
	Joins(fields ...field.RelationField) ICollectionInfoDo
	Preload(fields ...field.RelationField) ICollectionInfoDo
	FirstOrInit() (*model.CollectionInfo, error)
	FirstOrCreate() (*model.CollectionInfo, error)
	FindByPage(offset int, limit int) (result []*model.CollectionInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICollectionInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c collectionInfoDo) Debug() ICollectionInfoDo {
	return c.withDO(c.DO.Debug())
}

func (c collectionInfoDo) WithContext(ctx context.Context) ICollectionInfoDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c collectionInfoDo) ReadDB() ICollectionInfoDo {
	return c.Clauses(dbresolver.Read)
}

func (c collectionInfoDo) WriteDB() ICollectionInfoDo {
	return c.Clauses(dbresolver.Write)
}

func (c collectionInfoDo) Session(config *gorm.Session) ICollectionInfoDo {
	return c.withDO(c.DO.Session(config))
}

func (c collectionInfoDo) Clauses(conds ...clause.Expression) ICollectionInfoDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c collectionInfoDo) Returning(value interface{}, columns ...string) ICollectionInfoDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c collectionInfoDo) Not(conds ...gen.Condition) ICollectionInfoDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c collectionInfoDo) Or(conds ...gen.Condition) ICollectionInfoDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c collectionInfoDo) Select(conds ...field.Expr) ICollectionInfoDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c collectionInfoDo) Where(conds ...gen.Condition) ICollectionInfoDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c collectionInfoDo) Order(conds ...field.Expr) ICollectionInfoDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c collectionInfoDo) Distinct(cols ...field.Expr) ICollectionInfoDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c collectionInfoDo) Omit(cols ...field.Expr) ICollectionInfoDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c collectionInfoDo) Join(table schema.Tabler, on ...field.Expr) ICollectionInfoDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c collectionInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICollectionInfoDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c collectionInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ICollectionInfoDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c collectionInfoDo) Group(cols ...field.Expr) ICollectionInfoDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c collectionInfoDo) Having(conds ...gen.Condition) ICollectionInfoDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c collectionInfoDo) Limit(limit int) ICollectionInfoDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c collectionInfoDo) Offset(offset int) ICollectionInfoDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c collectionInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectionInfoDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c collectionInfoDo) Unscoped() ICollectionInfoDo {
	return c.withDO(c.DO.Unscoped())
}

func (c collectionInfoDo) Create(values ...*model.CollectionInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c collectionInfoDo) CreateInBatches(values []*model.CollectionInfo, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c collectionInfoDo) Save(values ...*model.CollectionInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c collectionInfoDo) First() (*model.CollectionInfo, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionInfo), nil
	}
}

func (c collectionInfoDo) Take() (*model.CollectionInfo, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionInfo), nil
	}
}

func (c collectionInfoDo) Last() (*model.CollectionInfo, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionInfo), nil
	}
}

func (c collectionInfoDo) Find() ([]*model.CollectionInfo, error) {
	result, err := c.DO.Find()
	return result.([]*model.CollectionInfo), err
}

func (c collectionInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectionInfo, err error) {
	buf := make([]*model.CollectionInfo, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c collectionInfoDo) FindInBatches(result *[]*model.CollectionInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c collectionInfoDo) Attrs(attrs ...field.AssignExpr) ICollectionInfoDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c collectionInfoDo) Assign(attrs ...field.AssignExpr) ICollectionInfoDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c collectionInfoDo) Joins(fields ...field.RelationField) ICollectionInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c collectionInfoDo) Preload(fields ...field.RelationField) ICollectionInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c collectionInfoDo) FirstOrInit() (*model.CollectionInfo, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionInfo), nil
	}
}

func (c collectionInfoDo) FirstOrCreate() (*model.CollectionInfo, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionInfo), nil
	}
}

func (c collectionInfoDo) FindByPage(offset int, limit int) (result []*model.CollectionInfo, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c collectionInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c collectionInfoDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c collectionInfoDo) Delete(models ...*model.CollectionInfo) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *collectionInfoDo) withDO(do gen.Dao) *collectionInfoDo {
	c.DO = *do.(*gen.DO)
	return c
}
