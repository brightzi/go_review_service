// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newUserCouponInfo(db *gorm.DB, opts ...gen.DOOption) userCouponInfo {
	_userCouponInfo := userCouponInfo{}

	_userCouponInfo.userCouponInfoDo.UseDB(db, opts...)
	_userCouponInfo.userCouponInfoDo.UseModel(&model.UserCouponInfo{})

	tableName := _userCouponInfo.userCouponInfoDo.TableName()
	_userCouponInfo.ALL = field.NewAsterisk(tableName)
	_userCouponInfo.ID = field.NewInt32(tableName, "id")
	_userCouponInfo.UserID = field.NewInt32(tableName, "user_id")
	_userCouponInfo.CouponID = field.NewInt32(tableName, "coupon_id")
	_userCouponInfo.Status = field.NewBool(tableName, "status")
	_userCouponInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_userCouponInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userCouponInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_userCouponInfo.fillFieldMap()

	return _userCouponInfo
}

type userCouponInfo struct {
	userCouponInfoDo userCouponInfoDo

	ALL       field.Asterisk
	ID        field.Int32 // 用户优惠券表
	UserID    field.Int32
	CouponID  field.Int32
	Status    field.Bool // 状态：1可用 2已用 3过期
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userCouponInfo) Table(newTableName string) *userCouponInfo {
	u.userCouponInfoDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCouponInfo) As(alias string) *userCouponInfo {
	u.userCouponInfoDo.DO = *(u.userCouponInfoDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCouponInfo) updateTableName(table string) *userCouponInfo {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewInt32(table, "user_id")
	u.CouponID = field.NewInt32(table, "coupon_id")
	u.Status = field.NewBool(table, "status")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userCouponInfo) WithContext(ctx context.Context) IUserCouponInfoDo {
	return u.userCouponInfoDo.WithContext(ctx)
}

func (u userCouponInfo) TableName() string { return u.userCouponInfoDo.TableName() }

func (u userCouponInfo) Alias() string { return u.userCouponInfoDo.Alias() }

func (u userCouponInfo) Columns(cols ...field.Expr) gen.Columns {
	return u.userCouponInfoDo.Columns(cols...)
}

func (u *userCouponInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCouponInfo) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["coupon_id"] = u.CouponID
	u.fieldMap["status"] = u.Status
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userCouponInfo) clone(db *gorm.DB) userCouponInfo {
	u.userCouponInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCouponInfo) replaceDB(db *gorm.DB) userCouponInfo {
	u.userCouponInfoDo.ReplaceDB(db)
	return u
}

type userCouponInfoDo struct{ gen.DO }

type IUserCouponInfoDo interface {
	gen.SubQuery
	Debug() IUserCouponInfoDo
	WithContext(ctx context.Context) IUserCouponInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserCouponInfoDo
	WriteDB() IUserCouponInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserCouponInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserCouponInfoDo
	Not(conds ...gen.Condition) IUserCouponInfoDo
	Or(conds ...gen.Condition) IUserCouponInfoDo
	Select(conds ...field.Expr) IUserCouponInfoDo
	Where(conds ...gen.Condition) IUserCouponInfoDo
	Order(conds ...field.Expr) IUserCouponInfoDo
	Distinct(cols ...field.Expr) IUserCouponInfoDo
	Omit(cols ...field.Expr) IUserCouponInfoDo
	Join(table schema.Tabler, on ...field.Expr) IUserCouponInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserCouponInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserCouponInfoDo
	Group(cols ...field.Expr) IUserCouponInfoDo
	Having(conds ...gen.Condition) IUserCouponInfoDo
	Limit(limit int) IUserCouponInfoDo
	Offset(offset int) IUserCouponInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCouponInfoDo
	Unscoped() IUserCouponInfoDo
	Create(values ...*model.UserCouponInfo) error
	CreateInBatches(values []*model.UserCouponInfo, batchSize int) error
	Save(values ...*model.UserCouponInfo) error
	First() (*model.UserCouponInfo, error)
	Take() (*model.UserCouponInfo, error)
	Last() (*model.UserCouponInfo, error)
	Find() ([]*model.UserCouponInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCouponInfo, err error)
	FindInBatches(result *[]*model.UserCouponInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserCouponInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserCouponInfoDo
	Assign(attrs ...field.AssignExpr) IUserCouponInfoDo
	Joins(fields ...field.RelationField) IUserCouponInfoDo
	Preload(fields ...field.RelationField) IUserCouponInfoDo
	FirstOrInit() (*model.UserCouponInfo, error)
	FirstOrCreate() (*model.UserCouponInfo, error)
	FindByPage(offset int, limit int) (result []*model.UserCouponInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserCouponInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userCouponInfoDo) Debug() IUserCouponInfoDo {
	return u.withDO(u.DO.Debug())
}

func (u userCouponInfoDo) WithContext(ctx context.Context) IUserCouponInfoDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCouponInfoDo) ReadDB() IUserCouponInfoDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCouponInfoDo) WriteDB() IUserCouponInfoDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCouponInfoDo) Session(config *gorm.Session) IUserCouponInfoDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCouponInfoDo) Clauses(conds ...clause.Expression) IUserCouponInfoDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCouponInfoDo) Returning(value interface{}, columns ...string) IUserCouponInfoDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCouponInfoDo) Not(conds ...gen.Condition) IUserCouponInfoDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCouponInfoDo) Or(conds ...gen.Condition) IUserCouponInfoDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCouponInfoDo) Select(conds ...field.Expr) IUserCouponInfoDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCouponInfoDo) Where(conds ...gen.Condition) IUserCouponInfoDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCouponInfoDo) Order(conds ...field.Expr) IUserCouponInfoDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCouponInfoDo) Distinct(cols ...field.Expr) IUserCouponInfoDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCouponInfoDo) Omit(cols ...field.Expr) IUserCouponInfoDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCouponInfoDo) Join(table schema.Tabler, on ...field.Expr) IUserCouponInfoDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCouponInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserCouponInfoDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCouponInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserCouponInfoDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCouponInfoDo) Group(cols ...field.Expr) IUserCouponInfoDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCouponInfoDo) Having(conds ...gen.Condition) IUserCouponInfoDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCouponInfoDo) Limit(limit int) IUserCouponInfoDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCouponInfoDo) Offset(offset int) IUserCouponInfoDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCouponInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCouponInfoDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCouponInfoDo) Unscoped() IUserCouponInfoDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCouponInfoDo) Create(values ...*model.UserCouponInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCouponInfoDo) CreateInBatches(values []*model.UserCouponInfo, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCouponInfoDo) Save(values ...*model.UserCouponInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCouponInfoDo) First() (*model.UserCouponInfo, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCouponInfo), nil
	}
}

func (u userCouponInfoDo) Take() (*model.UserCouponInfo, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCouponInfo), nil
	}
}

func (u userCouponInfoDo) Last() (*model.UserCouponInfo, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCouponInfo), nil
	}
}

func (u userCouponInfoDo) Find() ([]*model.UserCouponInfo, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCouponInfo), err
}

func (u userCouponInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCouponInfo, err error) {
	buf := make([]*model.UserCouponInfo, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCouponInfoDo) FindInBatches(result *[]*model.UserCouponInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCouponInfoDo) Attrs(attrs ...field.AssignExpr) IUserCouponInfoDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCouponInfoDo) Assign(attrs ...field.AssignExpr) IUserCouponInfoDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCouponInfoDo) Joins(fields ...field.RelationField) IUserCouponInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCouponInfoDo) Preload(fields ...field.RelationField) IUserCouponInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCouponInfoDo) FirstOrInit() (*model.UserCouponInfo, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCouponInfo), nil
	}
}

func (u userCouponInfoDo) FirstOrCreate() (*model.UserCouponInfo, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCouponInfo), nil
	}
}

func (u userCouponInfoDo) FindByPage(offset int, limit int) (result []*model.UserCouponInfo, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCouponInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCouponInfoDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCouponInfoDo) Delete(models ...*model.UserCouponInfo) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCouponInfoDo) withDO(do gen.Dao) *userCouponInfoDo {
	u.DO = *do.(*gen.DO)
	return u
}
