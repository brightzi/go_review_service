// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newArticleInfo(db *gorm.DB, opts ...gen.DOOption) articleInfo {
	_articleInfo := articleInfo{}

	_articleInfo.articleInfoDo.UseDB(db, opts...)
	_articleInfo.articleInfoDo.UseModel(&model.ArticleInfo{})

	tableName := _articleInfo.articleInfoDo.TableName()
	_articleInfo.ALL = field.NewAsterisk(tableName)
	_articleInfo.ID = field.NewInt32(tableName, "id")
	_articleInfo.UserID = field.NewInt32(tableName, "user_id")
	_articleInfo.Title = field.NewString(tableName, "title")
	_articleInfo.Desc = field.NewString(tableName, "desc")
	_articleInfo.PicURL = field.NewString(tableName, "pic_url")
	_articleInfo.IsAdmin = field.NewBool(tableName, "is_admin")
	_articleInfo.Praise = field.NewInt32(tableName, "praise")
	_articleInfo.Detail = field.NewString(tableName, "detail")
	_articleInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_articleInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_articleInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_articleInfo.fillFieldMap()

	return _articleInfo
}

// articleInfo 文章（种草）表
type articleInfo struct {
	articleInfoDo articleInfoDo

	ALL       field.Asterisk
	ID        field.Int32
	UserID    field.Int32  // 作者id
	Title     field.String // 标题
	Desc      field.String // 摘要
	PicURL    field.String // 封面图
	IsAdmin   field.Bool   // 1后台管理员发布 2前台用户发布
	Praise    field.Int32  // 点赞数
	Detail    field.String // 文章详情
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (a articleInfo) Table(newTableName string) *articleInfo {
	a.articleInfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleInfo) As(alias string) *articleInfo {
	a.articleInfoDo.DO = *(a.articleInfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleInfo) updateTableName(table string) *articleInfo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.UserID = field.NewInt32(table, "user_id")
	a.Title = field.NewString(table, "title")
	a.Desc = field.NewString(table, "desc")
	a.PicURL = field.NewString(table, "pic_url")
	a.IsAdmin = field.NewBool(table, "is_admin")
	a.Praise = field.NewInt32(table, "praise")
	a.Detail = field.NewString(table, "detail")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *articleInfo) WithContext(ctx context.Context) IArticleInfoDo {
	return a.articleInfoDo.WithContext(ctx)
}

func (a articleInfo) TableName() string { return a.articleInfoDo.TableName() }

func (a articleInfo) Alias() string { return a.articleInfoDo.Alias() }

func (a articleInfo) Columns(cols ...field.Expr) gen.Columns { return a.articleInfoDo.Columns(cols...) }

func (a *articleInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleInfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["title"] = a.Title
	a.fieldMap["desc"] = a.Desc
	a.fieldMap["pic_url"] = a.PicURL
	a.fieldMap["is_admin"] = a.IsAdmin
	a.fieldMap["praise"] = a.Praise
	a.fieldMap["detail"] = a.Detail
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a articleInfo) clone(db *gorm.DB) articleInfo {
	a.articleInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleInfo) replaceDB(db *gorm.DB) articleInfo {
	a.articleInfoDo.ReplaceDB(db)
	return a
}

type articleInfoDo struct{ gen.DO }

type IArticleInfoDo interface {
	gen.SubQuery
	Debug() IArticleInfoDo
	WithContext(ctx context.Context) IArticleInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleInfoDo
	WriteDB() IArticleInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleInfoDo
	Not(conds ...gen.Condition) IArticleInfoDo
	Or(conds ...gen.Condition) IArticleInfoDo
	Select(conds ...field.Expr) IArticleInfoDo
	Where(conds ...gen.Condition) IArticleInfoDo
	Order(conds ...field.Expr) IArticleInfoDo
	Distinct(cols ...field.Expr) IArticleInfoDo
	Omit(cols ...field.Expr) IArticleInfoDo
	Join(table schema.Tabler, on ...field.Expr) IArticleInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleInfoDo
	Group(cols ...field.Expr) IArticleInfoDo
	Having(conds ...gen.Condition) IArticleInfoDo
	Limit(limit int) IArticleInfoDo
	Offset(offset int) IArticleInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleInfoDo
	Unscoped() IArticleInfoDo
	Create(values ...*model.ArticleInfo) error
	CreateInBatches(values []*model.ArticleInfo, batchSize int) error
	Save(values ...*model.ArticleInfo) error
	First() (*model.ArticleInfo, error)
	Take() (*model.ArticleInfo, error)
	Last() (*model.ArticleInfo, error)
	Find() ([]*model.ArticleInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleInfo, err error)
	FindInBatches(result *[]*model.ArticleInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ArticleInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleInfoDo
	Assign(attrs ...field.AssignExpr) IArticleInfoDo
	Joins(fields ...field.RelationField) IArticleInfoDo
	Preload(fields ...field.RelationField) IArticleInfoDo
	FirstOrInit() (*model.ArticleInfo, error)
	FirstOrCreate() (*model.ArticleInfo, error)
	FindByPage(offset int, limit int) (result []*model.ArticleInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleInfoDo) Debug() IArticleInfoDo {
	return a.withDO(a.DO.Debug())
}

func (a articleInfoDo) WithContext(ctx context.Context) IArticleInfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleInfoDo) ReadDB() IArticleInfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleInfoDo) WriteDB() IArticleInfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleInfoDo) Session(config *gorm.Session) IArticleInfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleInfoDo) Clauses(conds ...clause.Expression) IArticleInfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleInfoDo) Returning(value interface{}, columns ...string) IArticleInfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleInfoDo) Not(conds ...gen.Condition) IArticleInfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleInfoDo) Or(conds ...gen.Condition) IArticleInfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleInfoDo) Select(conds ...field.Expr) IArticleInfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleInfoDo) Where(conds ...gen.Condition) IArticleInfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleInfoDo) Order(conds ...field.Expr) IArticleInfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleInfoDo) Distinct(cols ...field.Expr) IArticleInfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleInfoDo) Omit(cols ...field.Expr) IArticleInfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleInfoDo) Join(table schema.Tabler, on ...field.Expr) IArticleInfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleInfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleInfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleInfoDo) Group(cols ...field.Expr) IArticleInfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleInfoDo) Having(conds ...gen.Condition) IArticleInfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleInfoDo) Limit(limit int) IArticleInfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleInfoDo) Offset(offset int) IArticleInfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleInfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleInfoDo) Unscoped() IArticleInfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleInfoDo) Create(values ...*model.ArticleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleInfoDo) CreateInBatches(values []*model.ArticleInfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleInfoDo) Save(values ...*model.ArticleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleInfoDo) First() (*model.ArticleInfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleInfo), nil
	}
}

func (a articleInfoDo) Take() (*model.ArticleInfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleInfo), nil
	}
}

func (a articleInfoDo) Last() (*model.ArticleInfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleInfo), nil
	}
}

func (a articleInfoDo) Find() ([]*model.ArticleInfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArticleInfo), err
}

func (a articleInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleInfo, err error) {
	buf := make([]*model.ArticleInfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleInfoDo) FindInBatches(result *[]*model.ArticleInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleInfoDo) Attrs(attrs ...field.AssignExpr) IArticleInfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleInfoDo) Assign(attrs ...field.AssignExpr) IArticleInfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleInfoDo) Joins(fields ...field.RelationField) IArticleInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleInfoDo) Preload(fields ...field.RelationField) IArticleInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleInfoDo) FirstOrInit() (*model.ArticleInfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleInfo), nil
	}
}

func (a articleInfoDo) FirstOrCreate() (*model.ArticleInfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleInfo), nil
	}
}

func (a articleInfoDo) FindByPage(offset int, limit int) (result []*model.ArticleInfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleInfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleInfoDo) Delete(models ...*model.ArticleInfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleInfoDo) withDO(do gen.Dao) *articleInfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
