// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newFileInfo(db *gorm.DB, opts ...gen.DOOption) fileInfo {
	_fileInfo := fileInfo{}

	_fileInfo.fileInfoDo.UseDB(db, opts...)
	_fileInfo.fileInfoDo.UseModel(&model.FileInfo{})

	tableName := _fileInfo.fileInfoDo.TableName()
	_fileInfo.ALL = field.NewAsterisk(tableName)
	_fileInfo.ID = field.NewInt32(tableName, "id")
	_fileInfo.Name = field.NewString(tableName, "name")
	_fileInfo.Src = field.NewString(tableName, "src")
	_fileInfo.URL = field.NewString(tableName, "url")
	_fileInfo.UserID = field.NewInt32(tableName, "user_id")
	_fileInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_fileInfo.UpdatedAt = field.NewTime(tableName, "updated_at")

	_fileInfo.fillFieldMap()

	return _fileInfo
}

type fileInfo struct {
	fileInfoDo fileInfoDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String // 图片名称
	Src       field.String // 本地文件存储路径
	URL       field.String // URL地址
	UserID    field.Int32  // 用户id
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (f fileInfo) Table(newTableName string) *fileInfo {
	f.fileInfoDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileInfo) As(alias string) *fileInfo {
	f.fileInfoDo.DO = *(f.fileInfoDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileInfo) updateTableName(table string) *fileInfo {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")
	f.Src = field.NewString(table, "src")
	f.URL = field.NewString(table, "url")
	f.UserID = field.NewInt32(table, "user_id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fileInfo) WithContext(ctx context.Context) IFileInfoDo { return f.fileInfoDo.WithContext(ctx) }

func (f fileInfo) TableName() string { return f.fileInfoDo.TableName() }

func (f fileInfo) Alias() string { return f.fileInfoDo.Alias() }

func (f fileInfo) Columns(cols ...field.Expr) gen.Columns { return f.fileInfoDo.Columns(cols...) }

func (f *fileInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileInfo) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["src"] = f.Src
	f.fieldMap["url"] = f.URL
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fileInfo) clone(db *gorm.DB) fileInfo {
	f.fileInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileInfo) replaceDB(db *gorm.DB) fileInfo {
	f.fileInfoDo.ReplaceDB(db)
	return f
}

type fileInfoDo struct{ gen.DO }

type IFileInfoDo interface {
	gen.SubQuery
	Debug() IFileInfoDo
	WithContext(ctx context.Context) IFileInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileInfoDo
	WriteDB() IFileInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileInfoDo
	Not(conds ...gen.Condition) IFileInfoDo
	Or(conds ...gen.Condition) IFileInfoDo
	Select(conds ...field.Expr) IFileInfoDo
	Where(conds ...gen.Condition) IFileInfoDo
	Order(conds ...field.Expr) IFileInfoDo
	Distinct(cols ...field.Expr) IFileInfoDo
	Omit(cols ...field.Expr) IFileInfoDo
	Join(table schema.Tabler, on ...field.Expr) IFileInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileInfoDo
	Group(cols ...field.Expr) IFileInfoDo
	Having(conds ...gen.Condition) IFileInfoDo
	Limit(limit int) IFileInfoDo
	Offset(offset int) IFileInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileInfoDo
	Unscoped() IFileInfoDo
	Create(values ...*model.FileInfo) error
	CreateInBatches(values []*model.FileInfo, batchSize int) error
	Save(values ...*model.FileInfo) error
	First() (*model.FileInfo, error)
	Take() (*model.FileInfo, error)
	Last() (*model.FileInfo, error)
	Find() ([]*model.FileInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileInfo, err error)
	FindInBatches(result *[]*model.FileInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FileInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileInfoDo
	Assign(attrs ...field.AssignExpr) IFileInfoDo
	Joins(fields ...field.RelationField) IFileInfoDo
	Preload(fields ...field.RelationField) IFileInfoDo
	FirstOrInit() (*model.FileInfo, error)
	FirstOrCreate() (*model.FileInfo, error)
	FindByPage(offset int, limit int) (result []*model.FileInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileInfoDo) Debug() IFileInfoDo {
	return f.withDO(f.DO.Debug())
}

func (f fileInfoDo) WithContext(ctx context.Context) IFileInfoDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileInfoDo) ReadDB() IFileInfoDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileInfoDo) WriteDB() IFileInfoDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileInfoDo) Session(config *gorm.Session) IFileInfoDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileInfoDo) Clauses(conds ...clause.Expression) IFileInfoDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileInfoDo) Returning(value interface{}, columns ...string) IFileInfoDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileInfoDo) Not(conds ...gen.Condition) IFileInfoDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileInfoDo) Or(conds ...gen.Condition) IFileInfoDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileInfoDo) Select(conds ...field.Expr) IFileInfoDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileInfoDo) Where(conds ...gen.Condition) IFileInfoDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileInfoDo) Order(conds ...field.Expr) IFileInfoDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileInfoDo) Distinct(cols ...field.Expr) IFileInfoDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileInfoDo) Omit(cols ...field.Expr) IFileInfoDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileInfoDo) Join(table schema.Tabler, on ...field.Expr) IFileInfoDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileInfoDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileInfoDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileInfoDo) Group(cols ...field.Expr) IFileInfoDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileInfoDo) Having(conds ...gen.Condition) IFileInfoDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileInfoDo) Limit(limit int) IFileInfoDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileInfoDo) Offset(offset int) IFileInfoDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileInfoDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileInfoDo) Unscoped() IFileInfoDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileInfoDo) Create(values ...*model.FileInfo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileInfoDo) CreateInBatches(values []*model.FileInfo, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileInfoDo) Save(values ...*model.FileInfo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileInfoDo) First() (*model.FileInfo, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileInfo), nil
	}
}

func (f fileInfoDo) Take() (*model.FileInfo, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileInfo), nil
	}
}

func (f fileInfoDo) Last() (*model.FileInfo, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileInfo), nil
	}
}

func (f fileInfoDo) Find() ([]*model.FileInfo, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileInfo), err
}

func (f fileInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileInfo, err error) {
	buf := make([]*model.FileInfo, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileInfoDo) FindInBatches(result *[]*model.FileInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileInfoDo) Attrs(attrs ...field.AssignExpr) IFileInfoDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileInfoDo) Assign(attrs ...field.AssignExpr) IFileInfoDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileInfoDo) Joins(fields ...field.RelationField) IFileInfoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileInfoDo) Preload(fields ...field.RelationField) IFileInfoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileInfoDo) FirstOrInit() (*model.FileInfo, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileInfo), nil
	}
}

func (f fileInfoDo) FirstOrCreate() (*model.FileInfo, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileInfo), nil
	}
}

func (f fileInfoDo) FindByPage(offset int, limit int) (result []*model.FileInfo, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileInfoDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileInfoDo) Delete(models ...*model.FileInfo) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileInfoDo) withDO(do gen.Dao) *fileInfoDo {
	f.DO = *do.(*gen.DO)
	return f
}
