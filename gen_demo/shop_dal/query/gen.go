// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                  = new(Query)
	AddressInfo        *addressInfo
	AdminInfo          *adminInfo
	ArticleInfo        *articleInfo
	CartInfo           *cartInfo
	CategoryInfo       *categoryInfo
	CollectionInfo     *collectionInfo
	CommentInfo        *commentInfo
	ConsigneeInfo      *consigneeInfo
	CouponInfo         *couponInfo
	FileInfo           *fileInfo
	GoodsInfo          *goodsInfo
	GoodsOptionsInfo   *goodsOptionsInfo
	OrderGoodsInfo     *orderGoodsInfo
	OrderInfo          *orderInfo
	PermissionInfo     *permissionInfo
	PositionInfo       *positionInfo
	PraiseInfo         *praiseInfo
	RefundInfo         *refundInfo
	RoleInfo           *roleInfo
	RolePermissionInfo *rolePermissionInfo
	RotationInfo       *rotationInfo
	UserCouponInfo     *userCouponInfo
	UserInfo           *userInfo
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AddressInfo = &Q.AddressInfo
	AdminInfo = &Q.AdminInfo
	ArticleInfo = &Q.ArticleInfo
	CartInfo = &Q.CartInfo
	CategoryInfo = &Q.CategoryInfo
	CollectionInfo = &Q.CollectionInfo
	CommentInfo = &Q.CommentInfo
	ConsigneeInfo = &Q.ConsigneeInfo
	CouponInfo = &Q.CouponInfo
	FileInfo = &Q.FileInfo
	GoodsInfo = &Q.GoodsInfo
	GoodsOptionsInfo = &Q.GoodsOptionsInfo
	OrderGoodsInfo = &Q.OrderGoodsInfo
	OrderInfo = &Q.OrderInfo
	PermissionInfo = &Q.PermissionInfo
	PositionInfo = &Q.PositionInfo
	PraiseInfo = &Q.PraiseInfo
	RefundInfo = &Q.RefundInfo
	RoleInfo = &Q.RoleInfo
	RolePermissionInfo = &Q.RolePermissionInfo
	RotationInfo = &Q.RotationInfo
	UserCouponInfo = &Q.UserCouponInfo
	UserInfo = &Q.UserInfo
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                 db,
		AddressInfo:        newAddressInfo(db, opts...),
		AdminInfo:          newAdminInfo(db, opts...),
		ArticleInfo:        newArticleInfo(db, opts...),
		CartInfo:           newCartInfo(db, opts...),
		CategoryInfo:       newCategoryInfo(db, opts...),
		CollectionInfo:     newCollectionInfo(db, opts...),
		CommentInfo:        newCommentInfo(db, opts...),
		ConsigneeInfo:      newConsigneeInfo(db, opts...),
		CouponInfo:         newCouponInfo(db, opts...),
		FileInfo:           newFileInfo(db, opts...),
		GoodsInfo:          newGoodsInfo(db, opts...),
		GoodsOptionsInfo:   newGoodsOptionsInfo(db, opts...),
		OrderGoodsInfo:     newOrderGoodsInfo(db, opts...),
		OrderInfo:          newOrderInfo(db, opts...),
		PermissionInfo:     newPermissionInfo(db, opts...),
		PositionInfo:       newPositionInfo(db, opts...),
		PraiseInfo:         newPraiseInfo(db, opts...),
		RefundInfo:         newRefundInfo(db, opts...),
		RoleInfo:           newRoleInfo(db, opts...),
		RolePermissionInfo: newRolePermissionInfo(db, opts...),
		RotationInfo:       newRotationInfo(db, opts...),
		UserCouponInfo:     newUserCouponInfo(db, opts...),
		UserInfo:           newUserInfo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AddressInfo        addressInfo
	AdminInfo          adminInfo
	ArticleInfo        articleInfo
	CartInfo           cartInfo
	CategoryInfo       categoryInfo
	CollectionInfo     collectionInfo
	CommentInfo        commentInfo
	ConsigneeInfo      consigneeInfo
	CouponInfo         couponInfo
	FileInfo           fileInfo
	GoodsInfo          goodsInfo
	GoodsOptionsInfo   goodsOptionsInfo
	OrderGoodsInfo     orderGoodsInfo
	OrderInfo          orderInfo
	PermissionInfo     permissionInfo
	PositionInfo       positionInfo
	PraiseInfo         praiseInfo
	RefundInfo         refundInfo
	RoleInfo           roleInfo
	RolePermissionInfo rolePermissionInfo
	RotationInfo       rotationInfo
	UserCouponInfo     userCouponInfo
	UserInfo           userInfo
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		AddressInfo:        q.AddressInfo.clone(db),
		AdminInfo:          q.AdminInfo.clone(db),
		ArticleInfo:        q.ArticleInfo.clone(db),
		CartInfo:           q.CartInfo.clone(db),
		CategoryInfo:       q.CategoryInfo.clone(db),
		CollectionInfo:     q.CollectionInfo.clone(db),
		CommentInfo:        q.CommentInfo.clone(db),
		ConsigneeInfo:      q.ConsigneeInfo.clone(db),
		CouponInfo:         q.CouponInfo.clone(db),
		FileInfo:           q.FileInfo.clone(db),
		GoodsInfo:          q.GoodsInfo.clone(db),
		GoodsOptionsInfo:   q.GoodsOptionsInfo.clone(db),
		OrderGoodsInfo:     q.OrderGoodsInfo.clone(db),
		OrderInfo:          q.OrderInfo.clone(db),
		PermissionInfo:     q.PermissionInfo.clone(db),
		PositionInfo:       q.PositionInfo.clone(db),
		PraiseInfo:         q.PraiseInfo.clone(db),
		RefundInfo:         q.RefundInfo.clone(db),
		RoleInfo:           q.RoleInfo.clone(db),
		RolePermissionInfo: q.RolePermissionInfo.clone(db),
		RotationInfo:       q.RotationInfo.clone(db),
		UserCouponInfo:     q.UserCouponInfo.clone(db),
		UserInfo:           q.UserInfo.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		AddressInfo:        q.AddressInfo.replaceDB(db),
		AdminInfo:          q.AdminInfo.replaceDB(db),
		ArticleInfo:        q.ArticleInfo.replaceDB(db),
		CartInfo:           q.CartInfo.replaceDB(db),
		CategoryInfo:       q.CategoryInfo.replaceDB(db),
		CollectionInfo:     q.CollectionInfo.replaceDB(db),
		CommentInfo:        q.CommentInfo.replaceDB(db),
		ConsigneeInfo:      q.ConsigneeInfo.replaceDB(db),
		CouponInfo:         q.CouponInfo.replaceDB(db),
		FileInfo:           q.FileInfo.replaceDB(db),
		GoodsInfo:          q.GoodsInfo.replaceDB(db),
		GoodsOptionsInfo:   q.GoodsOptionsInfo.replaceDB(db),
		OrderGoodsInfo:     q.OrderGoodsInfo.replaceDB(db),
		OrderInfo:          q.OrderInfo.replaceDB(db),
		PermissionInfo:     q.PermissionInfo.replaceDB(db),
		PositionInfo:       q.PositionInfo.replaceDB(db),
		PraiseInfo:         q.PraiseInfo.replaceDB(db),
		RefundInfo:         q.RefundInfo.replaceDB(db),
		RoleInfo:           q.RoleInfo.replaceDB(db),
		RolePermissionInfo: q.RolePermissionInfo.replaceDB(db),
		RotationInfo:       q.RotationInfo.replaceDB(db),
		UserCouponInfo:     q.UserCouponInfo.replaceDB(db),
		UserInfo:           q.UserInfo.replaceDB(db),
	}
}

type queryCtx struct {
	AddressInfo        IAddressInfoDo
	AdminInfo          IAdminInfoDo
	ArticleInfo        IArticleInfoDo
	CartInfo           ICartInfoDo
	CategoryInfo       ICategoryInfoDo
	CollectionInfo     ICollectionInfoDo
	CommentInfo        ICommentInfoDo
	ConsigneeInfo      IConsigneeInfoDo
	CouponInfo         ICouponInfoDo
	FileInfo           IFileInfoDo
	GoodsInfo          IGoodsInfoDo
	GoodsOptionsInfo   IGoodsOptionsInfoDo
	OrderGoodsInfo     IOrderGoodsInfoDo
	OrderInfo          IOrderInfoDo
	PermissionInfo     IPermissionInfoDo
	PositionInfo       IPositionInfoDo
	PraiseInfo         IPraiseInfoDo
	RefundInfo         IRefundInfoDo
	RoleInfo           IRoleInfoDo
	RolePermissionInfo IRolePermissionInfoDo
	RotationInfo       IRotationInfoDo
	UserCouponInfo     IUserCouponInfoDo
	UserInfo           IUserInfoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AddressInfo:        q.AddressInfo.WithContext(ctx),
		AdminInfo:          q.AdminInfo.WithContext(ctx),
		ArticleInfo:        q.ArticleInfo.WithContext(ctx),
		CartInfo:           q.CartInfo.WithContext(ctx),
		CategoryInfo:       q.CategoryInfo.WithContext(ctx),
		CollectionInfo:     q.CollectionInfo.WithContext(ctx),
		CommentInfo:        q.CommentInfo.WithContext(ctx),
		ConsigneeInfo:      q.ConsigneeInfo.WithContext(ctx),
		CouponInfo:         q.CouponInfo.WithContext(ctx),
		FileInfo:           q.FileInfo.WithContext(ctx),
		GoodsInfo:          q.GoodsInfo.WithContext(ctx),
		GoodsOptionsInfo:   q.GoodsOptionsInfo.WithContext(ctx),
		OrderGoodsInfo:     q.OrderGoodsInfo.WithContext(ctx),
		OrderInfo:          q.OrderInfo.WithContext(ctx),
		PermissionInfo:     q.PermissionInfo.WithContext(ctx),
		PositionInfo:       q.PositionInfo.WithContext(ctx),
		PraiseInfo:         q.PraiseInfo.WithContext(ctx),
		RefundInfo:         q.RefundInfo.WithContext(ctx),
		RoleInfo:           q.RoleInfo.WithContext(ctx),
		RolePermissionInfo: q.RolePermissionInfo.WithContext(ctx),
		RotationInfo:       q.RotationInfo.WithContext(ctx),
		UserCouponInfo:     q.UserCouponInfo.WithContext(ctx),
		UserInfo:           q.UserInfo.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
