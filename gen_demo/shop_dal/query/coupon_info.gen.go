// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newCouponInfo(db *gorm.DB, opts ...gen.DOOption) couponInfo {
	_couponInfo := couponInfo{}

	_couponInfo.couponInfoDo.UseDB(db, opts...)
	_couponInfo.couponInfoDo.UseModel(&model.CouponInfo{})

	tableName := _couponInfo.couponInfoDo.TableName()
	_couponInfo.ALL = field.NewAsterisk(tableName)
	_couponInfo.ID = field.NewInt32(tableName, "id")
	_couponInfo.Name = field.NewString(tableName, "name")
	_couponInfo.Price = field.NewInt32(tableName, "price")
	_couponInfo.GoodsIds = field.NewString(tableName, "goods_ids")
	_couponInfo.CategoryID = field.NewInt32(tableName, "category_id")
	_couponInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_couponInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_couponInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_couponInfo.fillFieldMap()

	return _couponInfo
}

// couponInfo 轮播图表

type couponInfo struct {
	couponInfoDo couponInfoDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String
	/*
		优惠前面值 单位分

	*/
	Price      field.Int32
	GoodsIds   field.String // 关联使用的goods_ids  逗号分隔
	CategoryID field.Int32  // 关联使用的分类id
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field

	fieldMap map[string]field.Expr
}

func (c couponInfo) Table(newTableName string) *couponInfo {
	c.couponInfoDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c couponInfo) As(alias string) *couponInfo {
	c.couponInfoDo.DO = *(c.couponInfoDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *couponInfo) updateTableName(table string) *couponInfo {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Name = field.NewString(table, "name")
	c.Price = field.NewInt32(table, "price")
	c.GoodsIds = field.NewString(table, "goods_ids")
	c.CategoryID = field.NewInt32(table, "category_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *couponInfo) WithContext(ctx context.Context) ICouponInfoDo {
	return c.couponInfoDo.WithContext(ctx)
}

func (c couponInfo) TableName() string { return c.couponInfoDo.TableName() }

func (c couponInfo) Alias() string { return c.couponInfoDo.Alias() }

func (c couponInfo) Columns(cols ...field.Expr) gen.Columns { return c.couponInfoDo.Columns(cols...) }

func (c *couponInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *couponInfo) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["price"] = c.Price
	c.fieldMap["goods_ids"] = c.GoodsIds
	c.fieldMap["category_id"] = c.CategoryID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c couponInfo) clone(db *gorm.DB) couponInfo {
	c.couponInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c couponInfo) replaceDB(db *gorm.DB) couponInfo {
	c.couponInfoDo.ReplaceDB(db)
	return c
}

type couponInfoDo struct{ gen.DO }

type ICouponInfoDo interface {
	gen.SubQuery
	Debug() ICouponInfoDo
	WithContext(ctx context.Context) ICouponInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICouponInfoDo
	WriteDB() ICouponInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICouponInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICouponInfoDo
	Not(conds ...gen.Condition) ICouponInfoDo
	Or(conds ...gen.Condition) ICouponInfoDo
	Select(conds ...field.Expr) ICouponInfoDo
	Where(conds ...gen.Condition) ICouponInfoDo
	Order(conds ...field.Expr) ICouponInfoDo
	Distinct(cols ...field.Expr) ICouponInfoDo
	Omit(cols ...field.Expr) ICouponInfoDo
	Join(table schema.Tabler, on ...field.Expr) ICouponInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICouponInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICouponInfoDo
	Group(cols ...field.Expr) ICouponInfoDo
	Having(conds ...gen.Condition) ICouponInfoDo
	Limit(limit int) ICouponInfoDo
	Offset(offset int) ICouponInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICouponInfoDo
	Unscoped() ICouponInfoDo
	Create(values ...*model.CouponInfo) error
	CreateInBatches(values []*model.CouponInfo, batchSize int) error
	Save(values ...*model.CouponInfo) error
	First() (*model.CouponInfo, error)
	Take() (*model.CouponInfo, error)
	Last() (*model.CouponInfo, error)
	Find() ([]*model.CouponInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CouponInfo, err error)
	FindInBatches(result *[]*model.CouponInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CouponInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICouponInfoDo
	Assign(attrs ...field.AssignExpr) ICouponInfoDo
	Joins(fields ...field.RelationField) ICouponInfoDo
	Preload(fields ...field.RelationField) ICouponInfoDo
	FirstOrInit() (*model.CouponInfo, error)
	FirstOrCreate() (*model.CouponInfo, error)
	FindByPage(offset int, limit int) (result []*model.CouponInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICouponInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c couponInfoDo) Debug() ICouponInfoDo {
	return c.withDO(c.DO.Debug())
}

func (c couponInfoDo) WithContext(ctx context.Context) ICouponInfoDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c couponInfoDo) ReadDB() ICouponInfoDo {
	return c.Clauses(dbresolver.Read)
}

func (c couponInfoDo) WriteDB() ICouponInfoDo {
	return c.Clauses(dbresolver.Write)
}

func (c couponInfoDo) Session(config *gorm.Session) ICouponInfoDo {
	return c.withDO(c.DO.Session(config))
}

func (c couponInfoDo) Clauses(conds ...clause.Expression) ICouponInfoDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c couponInfoDo) Returning(value interface{}, columns ...string) ICouponInfoDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c couponInfoDo) Not(conds ...gen.Condition) ICouponInfoDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c couponInfoDo) Or(conds ...gen.Condition) ICouponInfoDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c couponInfoDo) Select(conds ...field.Expr) ICouponInfoDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c couponInfoDo) Where(conds ...gen.Condition) ICouponInfoDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c couponInfoDo) Order(conds ...field.Expr) ICouponInfoDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c couponInfoDo) Distinct(cols ...field.Expr) ICouponInfoDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c couponInfoDo) Omit(cols ...field.Expr) ICouponInfoDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c couponInfoDo) Join(table schema.Tabler, on ...field.Expr) ICouponInfoDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c couponInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICouponInfoDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c couponInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ICouponInfoDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c couponInfoDo) Group(cols ...field.Expr) ICouponInfoDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c couponInfoDo) Having(conds ...gen.Condition) ICouponInfoDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c couponInfoDo) Limit(limit int) ICouponInfoDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c couponInfoDo) Offset(offset int) ICouponInfoDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c couponInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICouponInfoDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c couponInfoDo) Unscoped() ICouponInfoDo {
	return c.withDO(c.DO.Unscoped())
}

func (c couponInfoDo) Create(values ...*model.CouponInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c couponInfoDo) CreateInBatches(values []*model.CouponInfo, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c couponInfoDo) Save(values ...*model.CouponInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c couponInfoDo) First() (*model.CouponInfo, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CouponInfo), nil
	}
}

func (c couponInfoDo) Take() (*model.CouponInfo, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CouponInfo), nil
	}
}

func (c couponInfoDo) Last() (*model.CouponInfo, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CouponInfo), nil
	}
}

func (c couponInfoDo) Find() ([]*model.CouponInfo, error) {
	result, err := c.DO.Find()
	return result.([]*model.CouponInfo), err
}

func (c couponInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CouponInfo, err error) {
	buf := make([]*model.CouponInfo, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c couponInfoDo) FindInBatches(result *[]*model.CouponInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c couponInfoDo) Attrs(attrs ...field.AssignExpr) ICouponInfoDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c couponInfoDo) Assign(attrs ...field.AssignExpr) ICouponInfoDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c couponInfoDo) Joins(fields ...field.RelationField) ICouponInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c couponInfoDo) Preload(fields ...field.RelationField) ICouponInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c couponInfoDo) FirstOrInit() (*model.CouponInfo, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CouponInfo), nil
	}
}

func (c couponInfoDo) FirstOrCreate() (*model.CouponInfo, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CouponInfo), nil
	}
}

func (c couponInfoDo) FindByPage(offset int, limit int) (result []*model.CouponInfo, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c couponInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c couponInfoDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c couponInfoDo) Delete(models ...*model.CouponInfo) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *couponInfoDo) withDO(do gen.Dao) *couponInfoDo {
	c.DO = *do.(*gen.DO)
	return c
}
