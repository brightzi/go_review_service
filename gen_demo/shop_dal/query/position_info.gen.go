// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newPositionInfo(db *gorm.DB, opts ...gen.DOOption) positionInfo {
	_positionInfo := positionInfo{}

	_positionInfo.positionInfoDo.UseDB(db, opts...)
	_positionInfo.positionInfoDo.UseModel(&model.PositionInfo{})

	tableName := _positionInfo.positionInfoDo.TableName()
	_positionInfo.ALL = field.NewAsterisk(tableName)
	_positionInfo.ID = field.NewInt32(tableName, "id")
	_positionInfo.PicURL = field.NewString(tableName, "pic_url")
	_positionInfo.GoodsName = field.NewString(tableName, "goods_name")
	_positionInfo.Link = field.NewString(tableName, "link")
	_positionInfo.Sort = field.NewInt32(tableName, "sort")
	_positionInfo.GoodsID = field.NewInt32(tableName, "goods_id")
	_positionInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_positionInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_positionInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_positionInfo.fillFieldMap()

	return _positionInfo
}

type positionInfo struct {
	positionInfoDo positionInfoDo

	ALL       field.Asterisk
	ID        field.Int32
	PicURL    field.String // 图片链接
	GoodsName field.String // 商品名称
	Link      field.String // 跳转链接
	Sort      field.Int32  // 排序
	GoodsID   field.Int32  // 商品id
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (p positionInfo) Table(newTableName string) *positionInfo {
	p.positionInfoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p positionInfo) As(alias string) *positionInfo {
	p.positionInfoDo.DO = *(p.positionInfoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *positionInfo) updateTableName(table string) *positionInfo {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.PicURL = field.NewString(table, "pic_url")
	p.GoodsName = field.NewString(table, "goods_name")
	p.Link = field.NewString(table, "link")
	p.Sort = field.NewInt32(table, "sort")
	p.GoodsID = field.NewInt32(table, "goods_id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *positionInfo) WithContext(ctx context.Context) IPositionInfoDo {
	return p.positionInfoDo.WithContext(ctx)
}

func (p positionInfo) TableName() string { return p.positionInfoDo.TableName() }

func (p positionInfo) Alias() string { return p.positionInfoDo.Alias() }

func (p positionInfo) Columns(cols ...field.Expr) gen.Columns {
	return p.positionInfoDo.Columns(cols...)
}

func (p *positionInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *positionInfo) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["pic_url"] = p.PicURL
	p.fieldMap["goods_name"] = p.GoodsName
	p.fieldMap["link"] = p.Link
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["goods_id"] = p.GoodsID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p positionInfo) clone(db *gorm.DB) positionInfo {
	p.positionInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p positionInfo) replaceDB(db *gorm.DB) positionInfo {
	p.positionInfoDo.ReplaceDB(db)
	return p
}

type positionInfoDo struct{ gen.DO }

type IPositionInfoDo interface {
	gen.SubQuery
	Debug() IPositionInfoDo
	WithContext(ctx context.Context) IPositionInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPositionInfoDo
	WriteDB() IPositionInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPositionInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPositionInfoDo
	Not(conds ...gen.Condition) IPositionInfoDo
	Or(conds ...gen.Condition) IPositionInfoDo
	Select(conds ...field.Expr) IPositionInfoDo
	Where(conds ...gen.Condition) IPositionInfoDo
	Order(conds ...field.Expr) IPositionInfoDo
	Distinct(cols ...field.Expr) IPositionInfoDo
	Omit(cols ...field.Expr) IPositionInfoDo
	Join(table schema.Tabler, on ...field.Expr) IPositionInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPositionInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPositionInfoDo
	Group(cols ...field.Expr) IPositionInfoDo
	Having(conds ...gen.Condition) IPositionInfoDo
	Limit(limit int) IPositionInfoDo
	Offset(offset int) IPositionInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPositionInfoDo
	Unscoped() IPositionInfoDo
	Create(values ...*model.PositionInfo) error
	CreateInBatches(values []*model.PositionInfo, batchSize int) error
	Save(values ...*model.PositionInfo) error
	First() (*model.PositionInfo, error)
	Take() (*model.PositionInfo, error)
	Last() (*model.PositionInfo, error)
	Find() ([]*model.PositionInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PositionInfo, err error)
	FindInBatches(result *[]*model.PositionInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PositionInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPositionInfoDo
	Assign(attrs ...field.AssignExpr) IPositionInfoDo
	Joins(fields ...field.RelationField) IPositionInfoDo
	Preload(fields ...field.RelationField) IPositionInfoDo
	FirstOrInit() (*model.PositionInfo, error)
	FirstOrCreate() (*model.PositionInfo, error)
	FindByPage(offset int, limit int) (result []*model.PositionInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPositionInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p positionInfoDo) Debug() IPositionInfoDo {
	return p.withDO(p.DO.Debug())
}

func (p positionInfoDo) WithContext(ctx context.Context) IPositionInfoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p positionInfoDo) ReadDB() IPositionInfoDo {
	return p.Clauses(dbresolver.Read)
}

func (p positionInfoDo) WriteDB() IPositionInfoDo {
	return p.Clauses(dbresolver.Write)
}

func (p positionInfoDo) Session(config *gorm.Session) IPositionInfoDo {
	return p.withDO(p.DO.Session(config))
}

func (p positionInfoDo) Clauses(conds ...clause.Expression) IPositionInfoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p positionInfoDo) Returning(value interface{}, columns ...string) IPositionInfoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p positionInfoDo) Not(conds ...gen.Condition) IPositionInfoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p positionInfoDo) Or(conds ...gen.Condition) IPositionInfoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p positionInfoDo) Select(conds ...field.Expr) IPositionInfoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p positionInfoDo) Where(conds ...gen.Condition) IPositionInfoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p positionInfoDo) Order(conds ...field.Expr) IPositionInfoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p positionInfoDo) Distinct(cols ...field.Expr) IPositionInfoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p positionInfoDo) Omit(cols ...field.Expr) IPositionInfoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p positionInfoDo) Join(table schema.Tabler, on ...field.Expr) IPositionInfoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p positionInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPositionInfoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p positionInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IPositionInfoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p positionInfoDo) Group(cols ...field.Expr) IPositionInfoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p positionInfoDo) Having(conds ...gen.Condition) IPositionInfoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p positionInfoDo) Limit(limit int) IPositionInfoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p positionInfoDo) Offset(offset int) IPositionInfoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p positionInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPositionInfoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p positionInfoDo) Unscoped() IPositionInfoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p positionInfoDo) Create(values ...*model.PositionInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p positionInfoDo) CreateInBatches(values []*model.PositionInfo, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p positionInfoDo) Save(values ...*model.PositionInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p positionInfoDo) First() (*model.PositionInfo, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PositionInfo), nil
	}
}

func (p positionInfoDo) Take() (*model.PositionInfo, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PositionInfo), nil
	}
}

func (p positionInfoDo) Last() (*model.PositionInfo, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PositionInfo), nil
	}
}

func (p positionInfoDo) Find() ([]*model.PositionInfo, error) {
	result, err := p.DO.Find()
	return result.([]*model.PositionInfo), err
}

func (p positionInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PositionInfo, err error) {
	buf := make([]*model.PositionInfo, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p positionInfoDo) FindInBatches(result *[]*model.PositionInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p positionInfoDo) Attrs(attrs ...field.AssignExpr) IPositionInfoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p positionInfoDo) Assign(attrs ...field.AssignExpr) IPositionInfoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p positionInfoDo) Joins(fields ...field.RelationField) IPositionInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p positionInfoDo) Preload(fields ...field.RelationField) IPositionInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p positionInfoDo) FirstOrInit() (*model.PositionInfo, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PositionInfo), nil
	}
}

func (p positionInfoDo) FirstOrCreate() (*model.PositionInfo, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PositionInfo), nil
	}
}

func (p positionInfoDo) FindByPage(offset int, limit int) (result []*model.PositionInfo, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p positionInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p positionInfoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p positionInfoDo) Delete(models ...*model.PositionInfo) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *positionInfoDo) withDO(do gen.Dao) *positionInfoDo {
	p.DO = *do.(*gen.DO)
	return p
}
