// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_demo/dal/model"
)

func newPermissionInfo(db *gorm.DB, opts ...gen.DOOption) permissionInfo {
	_permissionInfo := permissionInfo{}

	_permissionInfo.permissionInfoDo.UseDB(db, opts...)
	_permissionInfo.permissionInfoDo.UseModel(&model.PermissionInfo{})

	tableName := _permissionInfo.permissionInfoDo.TableName()
	_permissionInfo.ALL = field.NewAsterisk(tableName)
	_permissionInfo.ID = field.NewInt32(tableName, "id")
	_permissionInfo.Name = field.NewString(tableName, "name")
	_permissionInfo.Path = field.NewString(tableName, "path")
	_permissionInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_permissionInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_permissionInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_permissionInfo.fillFieldMap()

	return _permissionInfo
}

type permissionInfo struct {
	permissionInfoDo permissionInfoDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String // 权限名称
	Path      field.String // 路径
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (p permissionInfo) Table(newTableName string) *permissionInfo {
	p.permissionInfoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p permissionInfo) As(alias string) *permissionInfo {
	p.permissionInfoDo.DO = *(p.permissionInfoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *permissionInfo) updateTableName(table string) *permissionInfo {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Name = field.NewString(table, "name")
	p.Path = field.NewString(table, "path")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *permissionInfo) WithContext(ctx context.Context) IPermissionInfoDo {
	return p.permissionInfoDo.WithContext(ctx)
}

func (p permissionInfo) TableName() string { return p.permissionInfoDo.TableName() }

func (p permissionInfo) Alias() string { return p.permissionInfoDo.Alias() }

func (p permissionInfo) Columns(cols ...field.Expr) gen.Columns {
	return p.permissionInfoDo.Columns(cols...)
}

func (p *permissionInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *permissionInfo) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["path"] = p.Path
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p permissionInfo) clone(db *gorm.DB) permissionInfo {
	p.permissionInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p permissionInfo) replaceDB(db *gorm.DB) permissionInfo {
	p.permissionInfoDo.ReplaceDB(db)
	return p
}

type permissionInfoDo struct{ gen.DO }

type IPermissionInfoDo interface {
	gen.SubQuery
	Debug() IPermissionInfoDo
	WithContext(ctx context.Context) IPermissionInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPermissionInfoDo
	WriteDB() IPermissionInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPermissionInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPermissionInfoDo
	Not(conds ...gen.Condition) IPermissionInfoDo
	Or(conds ...gen.Condition) IPermissionInfoDo
	Select(conds ...field.Expr) IPermissionInfoDo
	Where(conds ...gen.Condition) IPermissionInfoDo
	Order(conds ...field.Expr) IPermissionInfoDo
	Distinct(cols ...field.Expr) IPermissionInfoDo
	Omit(cols ...field.Expr) IPermissionInfoDo
	Join(table schema.Tabler, on ...field.Expr) IPermissionInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPermissionInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPermissionInfoDo
	Group(cols ...field.Expr) IPermissionInfoDo
	Having(conds ...gen.Condition) IPermissionInfoDo
	Limit(limit int) IPermissionInfoDo
	Offset(offset int) IPermissionInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPermissionInfoDo
	Unscoped() IPermissionInfoDo
	Create(values ...*model.PermissionInfo) error
	CreateInBatches(values []*model.PermissionInfo, batchSize int) error
	Save(values ...*model.PermissionInfo) error
	First() (*model.PermissionInfo, error)
	Take() (*model.PermissionInfo, error)
	Last() (*model.PermissionInfo, error)
	Find() ([]*model.PermissionInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PermissionInfo, err error)
	FindInBatches(result *[]*model.PermissionInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PermissionInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPermissionInfoDo
	Assign(attrs ...field.AssignExpr) IPermissionInfoDo
	Joins(fields ...field.RelationField) IPermissionInfoDo
	Preload(fields ...field.RelationField) IPermissionInfoDo
	FirstOrInit() (*model.PermissionInfo, error)
	FirstOrCreate() (*model.PermissionInfo, error)
	FindByPage(offset int, limit int) (result []*model.PermissionInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPermissionInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p permissionInfoDo) Debug() IPermissionInfoDo {
	return p.withDO(p.DO.Debug())
}

func (p permissionInfoDo) WithContext(ctx context.Context) IPermissionInfoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p permissionInfoDo) ReadDB() IPermissionInfoDo {
	return p.Clauses(dbresolver.Read)
}

func (p permissionInfoDo) WriteDB() IPermissionInfoDo {
	return p.Clauses(dbresolver.Write)
}

func (p permissionInfoDo) Session(config *gorm.Session) IPermissionInfoDo {
	return p.withDO(p.DO.Session(config))
}

func (p permissionInfoDo) Clauses(conds ...clause.Expression) IPermissionInfoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p permissionInfoDo) Returning(value interface{}, columns ...string) IPermissionInfoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p permissionInfoDo) Not(conds ...gen.Condition) IPermissionInfoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p permissionInfoDo) Or(conds ...gen.Condition) IPermissionInfoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p permissionInfoDo) Select(conds ...field.Expr) IPermissionInfoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p permissionInfoDo) Where(conds ...gen.Condition) IPermissionInfoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p permissionInfoDo) Order(conds ...field.Expr) IPermissionInfoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p permissionInfoDo) Distinct(cols ...field.Expr) IPermissionInfoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p permissionInfoDo) Omit(cols ...field.Expr) IPermissionInfoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p permissionInfoDo) Join(table schema.Tabler, on ...field.Expr) IPermissionInfoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p permissionInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPermissionInfoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p permissionInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IPermissionInfoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p permissionInfoDo) Group(cols ...field.Expr) IPermissionInfoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p permissionInfoDo) Having(conds ...gen.Condition) IPermissionInfoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p permissionInfoDo) Limit(limit int) IPermissionInfoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p permissionInfoDo) Offset(offset int) IPermissionInfoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p permissionInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPermissionInfoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p permissionInfoDo) Unscoped() IPermissionInfoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p permissionInfoDo) Create(values ...*model.PermissionInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p permissionInfoDo) CreateInBatches(values []*model.PermissionInfo, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p permissionInfoDo) Save(values ...*model.PermissionInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p permissionInfoDo) First() (*model.PermissionInfo, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionInfo), nil
	}
}

func (p permissionInfoDo) Take() (*model.PermissionInfo, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionInfo), nil
	}
}

func (p permissionInfoDo) Last() (*model.PermissionInfo, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionInfo), nil
	}
}

func (p permissionInfoDo) Find() ([]*model.PermissionInfo, error) {
	result, err := p.DO.Find()
	return result.([]*model.PermissionInfo), err
}

func (p permissionInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PermissionInfo, err error) {
	buf := make([]*model.PermissionInfo, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p permissionInfoDo) FindInBatches(result *[]*model.PermissionInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p permissionInfoDo) Attrs(attrs ...field.AssignExpr) IPermissionInfoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p permissionInfoDo) Assign(attrs ...field.AssignExpr) IPermissionInfoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p permissionInfoDo) Joins(fields ...field.RelationField) IPermissionInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p permissionInfoDo) Preload(fields ...field.RelationField) IPermissionInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p permissionInfoDo) FirstOrInit() (*model.PermissionInfo, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionInfo), nil
	}
}

func (p permissionInfoDo) FirstOrCreate() (*model.PermissionInfo, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionInfo), nil
	}
}

func (p permissionInfoDo) FindByPage(offset int, limit int) (result []*model.PermissionInfo, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p permissionInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p permissionInfoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p permissionInfoDo) Delete(models ...*model.PermissionInfo) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *permissionInfoDo) withDO(do gen.Dao) *permissionInfoDo {
	p.DO = *do.(*gen.DO)
	return p
}
